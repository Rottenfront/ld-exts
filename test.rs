#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod syntax_c {
    pub mod lexis {
        use lady_deirdre::lexis::Token;
        #[repr(u8)]
        pub enum CToken {
            EOI = 0,
            Mismatch = 1,
            #[priority(3)]
            #[rule("auto")]
            Auto,
            #[priority(3)]
            #[rule("break")]
            Break,
            #[priority(3)]
            #[rule("case")]
            Case,
            #[priority(3)]
            #[rule("char")]
            Char,
            #[priority(3)]
            #[rule("const")]
            Const,
            #[priority(3)]
            #[rule("continue")]
            Continue,
            #[priority(3)]
            #[rule("default")]
            Default,
            #[priority(3)]
            #[rule("do")]
            Do,
            #[priority(4)]
            #[rule("double")]
            Double,
            #[priority(3)]
            #[rule("else")]
            Else,
            #[priority(3)]
            #[rule("enum")]
            Enum,
            #[priority(3)]
            #[rule("extern")]
            Extern,
            #[priority(3)]
            #[rule("float")]
            Float,
            #[priority(3)]
            #[rule("for")]
            For,
            #[priority(3)]
            #[rule("goto")]
            Goto,
            #[priority(3)]
            #[rule("if")]
            If,
            #[priority(3)]
            #[rule("int")]
            Int,
            #[priority(3)]
            #[rule("inline")]
            Inline,
            #[priority(3)]
            #[rule("long")]
            Long,
            #[priority(3)]
            #[rule("register")]
            Register,
            #[priority(3)]
            #[rule("restrict")]
            Restrict,
            #[priority(3)]
            #[rule("return")]
            Return,
            #[priority(3)]
            #[rule("short")]
            Short,
            #[priority(3)]
            #[rule("signed")]
            Signed,
            #[priority(3)]
            #[rule("static")]
            Static,
            #[priority(3)]
            #[rule("struct")]
            Struct,
            #[priority(3)]
            #[rule("switch")]
            Switch,
            #[priority(3)]
            #[rule("typedef")]
            Typedef,
            #[priority(3)]
            #[rule("union")]
            Union,
            #[priority(3)]
            #[rule("unsigned")]
            Unsigned,
            #[priority(3)]
            #[rule("void")]
            Void,
            #[priority(3)]
            #[rule("volatile")]
            Volatile,
            #[priority(3)]
            #[rule("while")]
            While,
            #[priority(3)]
            #[rule("_Bool")]
            BoolType,
            #[priority(3)]
            #[rule("_Complex")]
            ComplexType,
            #[priority(3)]
            #[rule("_Imaginary")]
            ImaginaryType,
            #[priority(3)]
            #[rule("sizeof")]
            SizeOf,
            #[priority(3)]
            #[rule("__FUNCTION__")]
            GnuFunction,
            #[priority(3)]
            #[rule("__PRETTY_FUNCTION__")]
            GnuPrettyFunction,
            #[priority(3)]
            #[rule("__alignof" "__"?)]
            GnuAlignOf,
            #[priority(3)]
            #[rule("__asm" "__"?)]
            GnuAsm,
            #[priority(3)]
            #[rule("__attribute" "__"?)]
            GnuAttribute,
            #[priority(3)]
            #[rule("__builtin_offsetof")]
            GnuBuiltInOffsetOf,
            #[priority(3)]
            #[rule("__builtin_va_arg")]
            GnuBuiltInVaArg,
            #[priority(3)]
            #[rule("__complex__")]
            GnuComplex,
            #[priority(3)]
            #[rule("__const")]
            GnuConst,
            #[priority(3)]
            #[rule("__extension__")]
            GnuExtension,
            #[priority(3)]
            #[rule("__func__")]
            GnuFunc,
            #[priority(3)]
            #[rule("__imag" "__"?)]
            GnuImaginary,
            #[priority(3)]
            #[rule("__inline" "__"?)]
            GnuInline,
            #[priority(3)]
            #[rule("__label__")]
            GnuLabel,
            #[priority(3)]
            #[rule("__null")]
            GnuNull,
            #[priority(3)]
            #[rule("__real" "__"?)]
            GnuReal,
            #[priority(3)]
            #[rule("__restrict" "__"?)]
            GnuRestrict,
            #[priority(3)]
            #[rule("__signed" "__"?)]
            GnuSigned,
            #[priority(3)]
            #[rule("__thread")]
            GnuThread,
            #[priority(3)]
            #[rule("__typeof")]
            GnuTypeof,
            #[priority(3)]
            #[rule("__volatile" "__"?)]
            GnuVolatile,
            #[rule(
                '\''(
                    ^['\\',
                    '\'']|(
                        '\\'(
                            ^['0'..'7',
                            'x']|('x'['0'..'9', 'a'..'f', 'A'..'F']*)|(['0'..'7']+)
                        )
                    )
                )'\''?
            )]
            Character,
            #[rule(
                '"'(
                    ^['\\',
                    '"']|(
                        '\\'(
                            ^['0'..'7',
                            'x']|('x'['0'..'9', 'a'..'f', 'A'..'F']*)|(['0'..'7']+)
                        )
                    )
                )*'"'?
            )]
            String,
            #[priority(3)]
            #[rule("0x"['0'..'9', 'a'..'f', 'A'..'F']+['u', 'l', 'U', 'L']*)]
            HexNumber,
            #[rule(
                ['0'..'9']+('.'['0'..'9']*)?('e' '-'?['0'..'9']+)?['l',
                'L',
                'f',
                'F',
                'i']*
            )]
            Number,
            #[priority(2)]
            #[rule('.'['0'..'9']+('e' '-'?['0'..'9']+)?)]
            DotNumber,
            #[rule('\\'&.)]
            Backslash,
            #[rule('(')]
            POpen,
            #[rule(')')]
            PClose,
            #[rule('[')]
            BkOpen,
            #[rule(']')]
            BkClose,
            #[rule('{')]
            BcOpen,
            #[rule('}')]
            BcClose,
            #[rule(';')]
            Semicolon,
            #[rule(',')]
            Comma,
            #[rule('.')]
            Dot,
            #[rule(':')]
            Colon,
            #[rule(($alpha|'_')+)]
            Ident,
            #[rule('#')]
            Hash,
            #[priority(2)]
            #[rule("##")]
            DHash,
            #[priority(2)]
            #[rule(
                '#'$space*"include"$space*(
                    (
                        '<'(^['\n', '>', '\\']|('\\'.))*'>'?
                    )|('"'(^['\n', '"', '\\']|('\\'.))*'"'?)
                )
            )]
            IncludeDirective,
            #[priority(2)]
            #[rule('#'$space*"define")]
            DefineDirective,
            #[priority(2)]
            #[rule('#'$space*"if")]
            IfDirective,
            #[priority(3)]
            #[rule('#'$space*"ifdef")]
            IfDefDirective,
            #[priority(3)]
            #[rule('#'$space*"ifndef")]
            IfNotDefDirective,
            #[priority(2)]
            #[rule('#'$space*"else")]
            ElseDirective,
            #[priority(2)]
            #[rule('#'$space*"elif")]
            ElseIfDirective,
            #[priority(3)]
            #[rule('#'$space*"elifdef")]
            ElseIfDefDirective,
            #[priority(3)]
            #[rule('#'$space*"elifndef")]
            ElseIfNotDefDirective,
            #[priority(2)]
            #[rule('#'$space*"endif")]
            EndIfDirective,
            #[priority(2)]
            #[rule('#'$space*"pragma"(^['\\', '\n']|('\\'.))*'\n')]
            PragmaDirective,
            #[priority(2)]
            #[rule('#'$space*"error"(^['\\', '\n']|('\\'.))*'\n')]
            ErrorDirective,
            #[priority(2)]
            #[rule('#'$space*"warning"(^['\\', '\n']|('\\'.))*'\n')]
            WarnDirective,
            #[priority(2)]
            #[rule('#'$space*"line"(^['\\', '\n']|('\\'.))*'\n')]
            LineDirective,
            #[rule($space+)]
            Whitespace,
            #[priority(2)]
            #[rule(['\n', '\r']+)]
            NewLine,
            #[priority(5)]
            #[rule("/*"(^['*']|('*'^['/'])*"*/"?))]
            MlComment,
            #[priority(5)]
            #[rule("//"(^['\n', '\\']|('\\'.))*'\n'?)]
            Comment,
            #[rule('~')]
            Tilde,
            #[rule('!')]
            Bang,
            #[priority(2)]
            #[rule("++")]
            Inc,
            #[priority(2)]
            #[rule("--")]
            Dec,
            #[rule('+')]
            Add,
            #[rule('-')]
            Sub,
            #[rule('*')]
            Star,
            #[rule('/')]
            Slash,
            #[rule('%')]
            Percent,
            #[priority(2)]
            #[rule("<<"|">>")]
            BitShift,
            #[rule('&')]
            Amp,
            #[rule('|')]
            Pipe,
            #[rule('^')]
            Xor,
            #[rule(('<'|'>')'='?)]
            BoolOp,
            #[priority(2)]
            #[rule(('='|'!')'=')]
            EqOrNot,
            #[priority(2)]
            #[rule("&&")]
            LogicalAnd,
            #[priority(2)]
            #[rule("||")]
            LogicalOr,
            #[rule('?')]
            Quest,
            #[priority(3)]
            #[rule((['*', '/', '%', '+', '-', '&', '^', '|']|"<<"|">>")'=')]
            SetOp,
            #[rule('=')]
            Set,
            Unreachable,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for CToken {
            #[inline]
            fn clone(&self) -> CToken {
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::Copy for CToken {}
        #[automatically_derived]
        impl ::core::fmt::Debug for CToken {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(
                    f,
                    match self {
                        CToken::EOI => "EOI",
                        CToken::Mismatch => "Mismatch",
                        CToken::Auto => "Auto",
                        CToken::Break => "Break",
                        CToken::Case => "Case",
                        CToken::Char => "Char",
                        CToken::Const => "Const",
                        CToken::Continue => "Continue",
                        CToken::Default => "Default",
                        CToken::Do => "Do",
                        CToken::Double => "Double",
                        CToken::Else => "Else",
                        CToken::Enum => "Enum",
                        CToken::Extern => "Extern",
                        CToken::Float => "Float",
                        CToken::For => "For",
                        CToken::Goto => "Goto",
                        CToken::If => "If",
                        CToken::Int => "Int",
                        CToken::Inline => "Inline",
                        CToken::Long => "Long",
                        CToken::Register => "Register",
                        CToken::Restrict => "Restrict",
                        CToken::Return => "Return",
                        CToken::Short => "Short",
                        CToken::Signed => "Signed",
                        CToken::Static => "Static",
                        CToken::Struct => "Struct",
                        CToken::Switch => "Switch",
                        CToken::Typedef => "Typedef",
                        CToken::Union => "Union",
                        CToken::Unsigned => "Unsigned",
                        CToken::Void => "Void",
                        CToken::Volatile => "Volatile",
                        CToken::While => "While",
                        CToken::BoolType => "BoolType",
                        CToken::ComplexType => "ComplexType",
                        CToken::ImaginaryType => "ImaginaryType",
                        CToken::SizeOf => "SizeOf",
                        CToken::GnuFunction => "GnuFunction",
                        CToken::GnuPrettyFunction => "GnuPrettyFunction",
                        CToken::GnuAlignOf => "GnuAlignOf",
                        CToken::GnuAsm => "GnuAsm",
                        CToken::GnuAttribute => "GnuAttribute",
                        CToken::GnuBuiltInOffsetOf => "GnuBuiltInOffsetOf",
                        CToken::GnuBuiltInVaArg => "GnuBuiltInVaArg",
                        CToken::GnuComplex => "GnuComplex",
                        CToken::GnuConst => "GnuConst",
                        CToken::GnuExtension => "GnuExtension",
                        CToken::GnuFunc => "GnuFunc",
                        CToken::GnuImaginary => "GnuImaginary",
                        CToken::GnuInline => "GnuInline",
                        CToken::GnuLabel => "GnuLabel",
                        CToken::GnuNull => "GnuNull",
                        CToken::GnuReal => "GnuReal",
                        CToken::GnuRestrict => "GnuRestrict",
                        CToken::GnuSigned => "GnuSigned",
                        CToken::GnuThread => "GnuThread",
                        CToken::GnuTypeof => "GnuTypeof",
                        CToken::GnuVolatile => "GnuVolatile",
                        CToken::Character => "Character",
                        CToken::String => "String",
                        CToken::HexNumber => "HexNumber",
                        CToken::Number => "Number",
                        CToken::DotNumber => "DotNumber",
                        CToken::Backslash => "Backslash",
                        CToken::POpen => "POpen",
                        CToken::PClose => "PClose",
                        CToken::BkOpen => "BkOpen",
                        CToken::BkClose => "BkClose",
                        CToken::BcOpen => "BcOpen",
                        CToken::BcClose => "BcClose",
                        CToken::Semicolon => "Semicolon",
                        CToken::Comma => "Comma",
                        CToken::Dot => "Dot",
                        CToken::Colon => "Colon",
                        CToken::Ident => "Ident",
                        CToken::Hash => "Hash",
                        CToken::DHash => "DHash",
                        CToken::IncludeDirective => "IncludeDirective",
                        CToken::DefineDirective => "DefineDirective",
                        CToken::IfDirective => "IfDirective",
                        CToken::IfDefDirective => "IfDefDirective",
                        CToken::IfNotDefDirective => "IfNotDefDirective",
                        CToken::ElseDirective => "ElseDirective",
                        CToken::ElseIfDirective => "ElseIfDirective",
                        CToken::ElseIfDefDirective => "ElseIfDefDirective",
                        CToken::ElseIfNotDefDirective => "ElseIfNotDefDirective",
                        CToken::EndIfDirective => "EndIfDirective",
                        CToken::PragmaDirective => "PragmaDirective",
                        CToken::ErrorDirective => "ErrorDirective",
                        CToken::WarnDirective => "WarnDirective",
                        CToken::LineDirective => "LineDirective",
                        CToken::Whitespace => "Whitespace",
                        CToken::NewLine => "NewLine",
                        CToken::MlComment => "MlComment",
                        CToken::Comment => "Comment",
                        CToken::Tilde => "Tilde",
                        CToken::Bang => "Bang",
                        CToken::Inc => "Inc",
                        CToken::Dec => "Dec",
                        CToken::Add => "Add",
                        CToken::Sub => "Sub",
                        CToken::Star => "Star",
                        CToken::Slash => "Slash",
                        CToken::Percent => "Percent",
                        CToken::BitShift => "BitShift",
                        CToken::Amp => "Amp",
                        CToken::Pipe => "Pipe",
                        CToken::Xor => "Xor",
                        CToken::BoolOp => "BoolOp",
                        CToken::EqOrNot => "EqOrNot",
                        CToken::LogicalAnd => "LogicalAnd",
                        CToken::LogicalOr => "LogicalOr",
                        CToken::Quest => "Quest",
                        CToken::SetOp => "SetOp",
                        CToken::Set => "Set",
                        CToken::Unreachable => "Unreachable",
                    },
                )
            }
        }
        impl ::lady_deirdre::lexis::Token for CToken {
            fn parse(session: &mut impl ::lady_deirdre::lexis::LexisSession) -> Self {
                #[allow(unused_mut)]
                let mut state = 1usize;
                #[allow(unused_mut)]
                let mut token = Self::Mismatch;
                loop {
                    let byte = ::lady_deirdre::lexis::LexisSession::advance(session);
                    if byte == 0xFF {
                        break;
                    }
                    match state {
                        1usize => {
                            match byte {
                                65u8..=90u8
                                | 104u8
                                | 106u8..=107u8
                                | 109u8..=113u8
                                | 120u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                48u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 6usize;
                                }
                                49u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 7usize;
                                }
                                62u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BoolOp;
                                    state = 28usize;
                                }
                                45u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Sub;
                                    state = 143usize;
                                }
                                34u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::String;
                                    state = 148usize;
                                }
                                92u8 => state = 163usize,
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 244usize;
                                }
                                119u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 268usize;
                                }
                                123u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BcOpen;
                                    break;
                                }
                                39u8 => state = 285usize,
                                35u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Hash;
                                    state = 291usize;
                                }
                                125u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BcClose;
                                    break;
                                }
                                9u8 | 11u8..=12u8 | 32u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Whitespace;
                                    state = 325usize;
                                }
                                118u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 399usize;
                                }
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Set;
                                    state = 401usize;
                                }
                                40u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::POpen;
                                    break;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 415usize;
                                }
                                63u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Quest;
                                    break;
                                }
                                33u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Bang;
                                    state = 434usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 446usize;
                                }
                                94u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Xor;
                                    state = 471usize;
                                }
                                10u8 | 13u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::NewLine;
                                    state = 489usize;
                                }
                                41u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::PClose;
                                    break;
                                }
                                43u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Add;
                                    state = 500usize;
                                }
                                37u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Percent;
                                    state = 538usize;
                                }
                                44u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Comma;
                                    break;
                                }
                                126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Tilde;
                                    break;
                                }
                                59u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Semicolon;
                                    break;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 563usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 573usize;
                                }
                                46u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Dot;
                                    state = 612usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 633usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 646usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 672usize;
                                }
                                58u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Colon;
                                    break;
                                }
                                98u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 684usize;
                                }
                                93u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BkClose;
                                    break;
                                }
                                124u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Pipe;
                                    state = 690usize;
                                }
                                47u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Slash;
                                    state = 698usize;
                                }
                                42u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Star;
                                    state = 715usize;
                                }
                                91u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BkOpen;
                                    break;
                                }
                                60u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BoolOp;
                                    state = 734usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 747usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 752usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 754usize;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 755usize;
                                }
                                38u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Amp;
                                    state = 756usize;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 757usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    if char::is_whitespace(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Whitespace;
                                        state = 325usize;
                                    }
                                    break;
                                }
                            }
                        }
                        3usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                    }
                                    break;
                                }
                            }
                        }
                        6usize => {
                            match byte {
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 7usize;
                                }
                                70u8 | 76u8 | 102u8 | 105u8 | 108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 8usize;
                                }
                                120u8 => state = 9usize,
                                46u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 10usize;
                                }
                                101u8 => state = 11usize,
                                _ => break,
                            }
                        }
                        7usize => {
                            match byte {
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                }
                                70u8 | 76u8 | 102u8 | 105u8 | 108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 8usize;
                                }
                                46u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 10usize;
                                }
                                101u8 => state = 11usize,
                                _ => break,
                            }
                        }
                        8usize => {
                            match byte {
                                70u8 | 76u8 | 102u8 | 105u8 | 108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                }
                                _ => break,
                            }
                        }
                        9usize => {
                            match byte {
                                48u8..=57u8 | 65u8..=70u8 | 97u8..=102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::HexNumber;
                                    state = 379usize;
                                }
                                _ => break,
                            }
                        }
                        10usize => {
                            match byte {
                                70u8 | 76u8 | 102u8 | 105u8 | 108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 8usize;
                                }
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                }
                                101u8 => state = 11usize,
                                _ => break,
                            }
                        }
                        11usize => {
                            match byte {
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 124usize;
                                }
                                45u8 => state = 125usize,
                                _ => break,
                            }
                        }
                        28usize => {
                            match byte {
                                62u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BitShift;
                                    state = 29usize;
                                }
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BoolOp;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        29usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        124usize => {
                            match byte {
                                70u8 | 76u8 | 102u8 | 105u8 | 108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 8usize;
                                }
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                }
                                _ => break,
                            }
                        }
                        125usize => {
                            match byte {
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Number;
                                    state = 124usize;
                                }
                                _ => break,
                            }
                        }
                        143usize => {
                            match byte {
                                45u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Dec;
                                    break;
                                }
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        148usize => {
                            match byte {
                                92u8 => state = 147usize,
                                9u8..=13u8
                                | 32u8..=33u8
                                | 35u8
                                | 37u8..=63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::String;
                                }
                                34u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::String;
                                    break;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::String;
                                }
                            }
                        }
                        147usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::String;
                                    state = 148usize;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::String;
                                    state = 148usize;
                                }
                            }
                        }
                        163usize => {
                            match byte {
                                46u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                49u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                63u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                68u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                71u8..=72u8
                                | 74u8..=75u8
                                | 77u8
                                | 81u8
                                | 83u8
                                | 86u8..=88u8
                                | 90u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                62u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                85u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                66u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                125u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                84u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                33u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                53u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                48u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                13u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                78u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                124u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                45u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                59u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                93u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                104u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                52u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                41u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                89u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                79u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                55u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                44u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                42u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                80u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                65u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                112u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                39u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                82u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                51u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                98u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                47u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                106u8 | 113u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                120u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                9u8 | 11u8..=12u8 | 32u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                70u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                118u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                73u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                35u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                54u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                119u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                43u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                92u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                67u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                56u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                10u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                37u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                50u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                94u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                60u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                121u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                123u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                58u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                34u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                40u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                109u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                91u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                69u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                38u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                76u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                107u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_uppercase(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Backslash;
                                        break;
                                    }
                                    if char::is_lowercase(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Backslash;
                                        break;
                                    }
                                    if char::is_numeric(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Backslash;
                                        break;
                                    }
                                    if char::is_whitespace(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Backslash;
                                        break;
                                    }
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Backslash;
                                    break;
                                }
                            }
                        }
                        244usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 38usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        38usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 39usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        39usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Goto;
                                    state = 458usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        268usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=103u8 | 105u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                104u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 97usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        97usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 98usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        98usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 311usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        285usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=38u8
                                | 40u8..=63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    state = 286usize;
                                }
                                92u8 => state = 287usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    state = 286usize;
                                }
                            }
                        }
                        286usize => {
                            match byte {
                                39u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        287usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=47u8
                                | 56u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=119u8
                                | 121u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    state = 286usize;
                                }
                                48u8..=55u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    state = 509usize;
                                }
                                120u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    state = 663usize;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    state = 286usize;
                                }
                            }
                        }
                        291usize => {
                            match byte {
                                100u8 => state = 292usize,
                                9u8..=13u8 | 32u8 => state = 293usize,
                                101u8 => state = 294usize,
                                105u8 => state = 295usize,
                                108u8 => state = 296usize,
                                35u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::DHash;
                                    break;
                                }
                                112u8 => state = 299usize,
                                119u8 => state = 300usize,
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_whitespace(ch) {
                                        state = 293usize;
                                    }
                                    break;
                                }
                            }
                        }
                        292usize => {
                            match byte {
                                101u8 => state = 462usize,
                                _ => break,
                            }
                        }
                        293usize => {
                            match byte {
                                100u8 => state = 292usize,
                                9u8..=13u8 | 32u8 => {}
                                101u8 => state = 294usize,
                                105u8 => state = 295usize,
                                108u8 => state = 296usize,
                                112u8 => state = 299usize,
                                119u8 => state = 300usize,
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_whitespace(ch) {}
                                    break;
                                }
                            }
                        }
                        294usize => {
                            match byte {
                                114u8 => state = 107usize,
                                110u8 => state = 283usize,
                                108u8 => state = 608usize,
                                _ => break,
                            }
                        }
                        107usize => {
                            match byte {
                                114u8 => state = 108usize,
                                _ => break,
                            }
                        }
                        108usize => {
                            match byte {
                                111u8 => state = 520usize,
                                _ => break,
                            }
                        }
                        283usize => {
                            match byte {
                                100u8 => state = 128usize,
                                _ => break,
                            }
                        }
                        128usize => {
                            match byte {
                                105u8 => state = 129usize,
                                _ => break,
                            }
                        }
                        129usize => {
                            match byte {
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::EndIfDirective;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        295usize => {
                            match byte {
                                110u8 => state = 312usize,
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IfDirective;
                                    state = 313usize;
                                }
                                _ => break,
                            }
                        }
                        296usize => {
                            match byte {
                                105u8 => state = 49usize,
                                _ => break,
                            }
                        }
                        49usize => {
                            match byte {
                                110u8 => state = 50usize,
                                _ => break,
                            }
                        }
                        50usize => {
                            match byte {
                                101u8 => state = 426usize,
                                _ => break,
                            }
                        }
                        299usize => {
                            match byte {
                                114u8 => state = 617usize,
                                _ => break,
                            }
                        }
                        300usize => {
                            match byte {
                                97u8 => state = 581usize,
                                _ => break,
                            }
                        }
                        311usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::While;
                                    state = 161usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        161usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        312usize => {
                            match byte {
                                99u8 => state = 570usize,
                                _ => break,
                            }
                        }
                        313usize => {
                            match byte {
                                100u8 => state = 452usize,
                                110u8 => state = 615usize,
                                _ => break,
                            }
                        }
                        325usize => {
                            match byte {
                                9u8..=13u8 | 32u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Whitespace;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_whitespace(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Whitespace;
                                    }
                                    break;
                                }
                            }
                        }
                        379usize => {
                            match byte {
                                48u8..=57u8
                                | 65u8..=70u8
                                | 76u8
                                | 85u8
                                | 97u8..=102u8
                                | 108u8
                                | 117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::HexNumber;
                                }
                                _ => break,
                            }
                        }
                        399usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 400usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        400usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=104u8
                                | 106u8..=107u8
                                | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 95usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 454usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        95usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 96usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        96usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 436usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        401usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::EqOrNot;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        415usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 416usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        416usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 100usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        100usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=102u8 | 104u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Long;
                                    state = 101usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        101usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        426usize => {
                            match byte {
                                10u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::LineDirective;
                                    break;
                                }
                                9u8
                                | 11u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {}
                                92u8 => state = 427usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    }
                                }
                            }
                        }
                        427usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => state = 426usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    state = 426usize;
                                }
                            }
                        }
                        434usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::EqOrNot;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        436usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 437usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        437usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 629usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        446usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=107u8
                                | 109u8..=110u8
                                | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 91usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 447usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        91usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::For;
                                    state = 92usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        92usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        447usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 455usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        452usize => {
                            match byte {
                                101u8 => state = 453usize,
                                _ => break,
                            }
                        }
                        453usize => {
                            match byte {
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IfDefDirective;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        454usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=99u8 | 101u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Void;
                                    state = 762usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        455usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 51usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        51usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Float;
                                    state = 52usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        52usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        458usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        462usize => {
                            match byte {
                                102u8 => state = 463usize,
                                _ => break,
                            }
                        }
                        463usize => {
                            match byte {
                                105u8 => state = 643usize,
                                _ => break,
                            }
                        }
                        471usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        489usize => {
                            match byte {
                                9u8 | 11u8..=12u8 | 32u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Whitespace;
                                    state = 325usize;
                                }
                                10u8 | 13u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::NewLine;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_whitespace(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Whitespace;
                                        state = 325usize;
                                    }
                                    break;
                                }
                            }
                        }
                        500usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                43u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Inc;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        509usize => {
                            match byte {
                                39u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    break;
                                }
                                48u8..=55u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                }
                                _ => break,
                            }
                        }
                        520usize => {
                            match byte {
                                114u8 => state = 609usize,
                                _ => break,
                            }
                        }
                        538usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        563usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 564usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        564usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=102u8
                                | 104u8..=114u8
                                | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 357usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 507usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 589usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        357usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 358usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        358usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=114u8 | 116u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 271usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        271usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 272usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        272usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 429usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        429usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Register;
                                    state = 430usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        430usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        507usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 86usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        86usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 87usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        87usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Return;
                                    state = 309usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        309usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        570usize => {
                            match byte {
                                108u8 => state = 431usize,
                                _ => break,
                            }
                        }
                        431usize => {
                            match byte {
                                117u8 => state = 264usize,
                                _ => break,
                            }
                        }
                        264usize => {
                            match byte {
                                100u8 => state = 265usize,
                                _ => break,
                            }
                        }
                        265usize => {
                            match byte {
                                101u8 => state = 457usize,
                                _ => break,
                            }
                        }
                        457usize => {
                            match byte {
                                34u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                    state = 102usize;
                                }
                                60u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                    state = 367usize;
                                }
                                9u8..=13u8 | 32u8 => {}
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_whitespace(ch) {}
                                    break;
                                }
                            }
                        }
                        102usize => {
                            match byte {
                                9u8
                                | 11u8..=13u8
                                | 32u8..=33u8
                                | 35u8
                                | 37u8..=63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                }
                                92u8 => state = 104usize,
                                34u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                    break;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                }
                            }
                        }
                        104usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                    state = 102usize;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                    state = 102usize;
                                }
                            }
                        }
                        367usize => {
                            match byte {
                                9u8
                                | 11u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=61u8
                                | 63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                }
                                92u8 => state = 368usize,
                                62u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                    break;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                }
                            }
                        }
                        368usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                    state = 367usize;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IncludeDirective;
                                    state = 367usize;
                                }
                            }
                        }
                        573usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=107u8
                                | 109u8
                                | 111u8..=119u8
                                | 121u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 240usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 574usize;
                                }
                                120u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 575usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        240usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=114u8 | 116u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 241usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        241usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Else;
                                    state = 561usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        561usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        574usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 353usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        353usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=108u8 | 110u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                109u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Enum;
                                    state = 354usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        354usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        575usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 337usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        337usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 338usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        338usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 269usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        269usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Extern;
                                    state = 270usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        270usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        581usize => {
                            match byte {
                                114u8 => state = 582usize,
                                _ => break,
                            }
                        }
                        582usize => {
                            match byte {
                                110u8 => state = 661usize,
                                _ => break,
                            }
                        }
                        589usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 78usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        78usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 79usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        79usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 284usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        284usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=98u8 | 100u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 360usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        360usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Restrict;
                                    state = 494usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        494usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        608usize => {
                            match byte {
                                115u8 => state = 365usize,
                                105u8 => state = 644usize,
                                _ => break,
                            }
                        }
                        365usize => {
                            match byte {
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::ElseDirective;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        609usize => {
                            match byte {
                                10u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::ErrorDirective;
                                    break;
                                }
                                9u8
                                | 11u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {}
                                92u8 => state = 610usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    }
                                }
                            }
                        }
                        610usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => state = 609usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    state = 609usize;
                                }
                            }
                        }
                        612usize => {
                            match byte {
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::DotNumber;
                                    state = 613usize;
                                }
                                _ => break,
                            }
                        }
                        613usize => {
                            match byte {
                                101u8 => state = 568usize,
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::DotNumber;
                                }
                                _ => break,
                            }
                        }
                        568usize => {
                            match byte {
                                45u8 => state = 473usize,
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::DotNumber;
                                    state = 474usize;
                                }
                                _ => break,
                            }
                        }
                        473usize => {
                            match byte {
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::DotNumber;
                                    state = 474usize;
                                }
                                _ => break,
                            }
                        }
                        474usize => {
                            match byte {
                                48u8..=57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::DotNumber;
                                }
                                _ => break,
                            }
                        }
                        615usize => {
                            match byte {
                                100u8 => state = 511usize,
                                _ => break,
                            }
                        }
                        511usize => {
                            match byte {
                                101u8 => state = 109usize,
                                _ => break,
                            }
                        }
                        109usize => {
                            match byte {
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::IfNotDefDirective;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        617usize => {
                            match byte {
                                97u8 => state = 482usize,
                                _ => break,
                            }
                        }
                        482usize => {
                            match byte {
                                103u8 => state = 483usize,
                                _ => break,
                            }
                        }
                        483usize => {
                            match byte {
                                109u8 => state = 719usize,
                                _ => break,
                            }
                        }
                        629usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Volatile;
                                    state = 630usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        630usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        633usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=103u8
                                | 106u8..=115u8
                                | 117u8..=118u8
                                | 120u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 525usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 634usize;
                                }
                                104u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 635usize;
                                }
                                119u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 636usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        525usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 113usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 526usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        113usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 114usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        114usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 660usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        526usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 348usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        348usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=98u8 | 100u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 349usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        349usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Struct;
                                    state = 518usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        518usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        634usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=102u8 | 104u8..=121u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 549usize;
                                }
                                122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 665usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        549usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 550usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        550usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 648usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        635usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 246usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        246usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 247usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        247usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Short;
                                    state = 278usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        278usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        636usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 714usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        643usize => {
                            match byte {
                                110u8 => state = 83usize,
                                _ => break,
                            }
                        }
                        83usize => {
                            match byte {
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::DefineDirective;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        644usize => {
                            match byte {
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::ElseIfDirective;
                                    state = 645usize;
                                }
                                _ => break,
                            }
                        }
                        645usize => {
                            match byte {
                                110u8 => state = 380usize,
                                100u8 => state = 696usize,
                                _ => break,
                            }
                        }
                        380usize => {
                            match byte {
                                100u8 => state = 159usize,
                                _ => break,
                            }
                        }
                        159usize => {
                            match byte {
                                101u8 => state = 111usize,
                                _ => break,
                            }
                        }
                        111usize => {
                            match byte {
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::ElseIfNotDefDirective;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        646usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=101u8
                                | 103u8..=109u8
                                | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 33usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::If;
                                    state = 323usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        33usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=107u8
                                | 109u8..=115u8
                                | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Int;
                                    state = 34usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 35usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        34usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        35usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 252usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        252usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 253usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        253usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Inline;
                                    state = 750usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        323usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        648usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=99u8 | 101u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Signed;
                                    state = 248usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        248usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        660usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=98u8 | 100u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Static;
                                    state = 465usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        465usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        661usize => {
                            match byte {
                                105u8 => state = 302usize,
                                _ => break,
                            }
                        }
                        302usize => {
                            match byte {
                                110u8 => state = 303usize,
                                _ => break,
                            }
                        }
                        303usize => {
                            match byte {
                                103u8 => state = 154usize,
                                _ => break,
                            }
                        }
                        154usize => {
                            match byte {
                                9u8
                                | 11u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {}
                                10u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::WarnDirective;
                                    break;
                                }
                                92u8 => state = 156usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    }
                                }
                            }
                        }
                        156usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => state = 154usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    state = 154usize;
                                }
                            }
                        }
                        663usize => {
                            match byte {
                                39u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                    break;
                                }
                                48u8..=57u8 | 65u8..=70u8 | 97u8..=102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Character;
                                }
                                _ => break,
                            }
                        }
                        665usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 666usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        666usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 675usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        672usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 623usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        623usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=104u8
                                | 106u8..=114u8
                                | 116u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 541usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 624usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        541usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 542usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        542usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Union;
                                    state = 667usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        624usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 599usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        599usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=102u8 | 104u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 532usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        532usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 533usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        533usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 321usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        321usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=99u8 | 101u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Unsigned;
                                    state = 322usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        322usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        667usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        675usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=101u8 | 103u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SizeOf;
                                    state = 650usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        650usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        684usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 355usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        355usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 356usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        356usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 316usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        316usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=106u8 | 108u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                107u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Break;
                                    state = 76usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        76usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        690usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                124u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::LogicalOr;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        696usize => {
                            match byte {
                                101u8 => state = 671usize,
                                _ => break,
                            }
                        }
                        671usize => {
                            match byte {
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::ElseIfDefDirective;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        698usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                42u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    state = 377usize;
                                }
                                47u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Comment;
                                    state = 600usize;
                                }
                                _ => break,
                            }
                        }
                        377usize => {
                            match byte {
                                57u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                46u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                107u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                59u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                55u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                123u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                112u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                82u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                49u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                91u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                58u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                35u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                67u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                125u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                66u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                37u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                70u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                42u8 => state = 376usize,
                                43u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                47u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                85u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                104u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                9u8 | 11u8..=12u8 | 32u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                60u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                39u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                65u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                56u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                69u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                52u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                76u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                109u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                79u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                92u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                51u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                119u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                84u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                98u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                94u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                38u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                45u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                80u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                33u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                71u8..=72u8
                                | 74u8..=75u8
                                | 77u8
                                | 81u8
                                | 83u8
                                | 86u8..=88u8
                                | 90u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                50u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                10u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                63u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                41u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                124u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                89u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                68u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                34u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                40u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                13u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                53u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                48u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                54u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                120u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                44u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                121u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                118u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                106u8 | 113u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                73u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                78u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                62u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                93u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_uppercase(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::MlComment;
                                        break;
                                    }
                                    if char::is_lowercase(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::MlComment;
                                        break;
                                    }
                                    if char::is_numeric(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::MlComment;
                                        break;
                                    }
                                    if char::is_whitespace(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::MlComment;
                                        break;
                                    }
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                            }
                        }
                        376usize => {
                            match byte {
                                47u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    break;
                                }
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=46u8
                                | 48u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    state = 377usize;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::MlComment;
                                    state = 377usize;
                                }
                            }
                        }
                        600usize => {
                            match byte {
                                9u8
                                | 11u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Comment;
                                }
                                92u8 => state = 601usize,
                                10u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Comment;
                                    break;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Comment;
                                }
                            }
                        }
                        601usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Comment;
                                    state = 600usize;
                                }
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Comment;
                                    state = 600usize;
                                }
                            }
                        }
                        714usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 593usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        593usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=98u8 | 100u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 289usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        289usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=103u8 | 105u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                104u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Switch;
                                    state = 290usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        290usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        715usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        719usize => {
                            match byte {
                                97u8 => state = 558usize,
                                _ => break,
                            }
                        }
                        558usize => {
                            match byte {
                                10u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::PragmaDirective;
                                    break;
                                }
                                9u8
                                | 11u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=91u8
                                | 93u8..=95u8
                                | 97u8..=126u8 => {}
                                92u8 => state = 559usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    }
                                }
                            }
                        }
                        559usize => {
                            match byte {
                                9u8..=13u8
                                | 32u8..=35u8
                                | 37u8..=63u8
                                | 65u8..=95u8
                                | 97u8..=126u8 => state = 558usize,
                                _ => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::consume(session)
                                    };
                                    state = 558usize;
                                }
                            }
                        }
                        734usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BoolOp;
                                    break;
                                }
                                60u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BitShift;
                                    state = 642usize;
                                }
                                _ => break,
                            }
                        }
                        642usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        747usize => {
                            match byte {
                                65u8 | 68u8..=72u8 | 74u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 59usize;
                                }
                                66u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 443usize;
                                }
                                73u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 703usize;
                                }
                                67u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 748usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        59usize => {
                            match byte {
                                65u8..=69u8
                                | 71u8..=79u8
                                | 81u8..=90u8
                                | 95u8
                                | 100u8
                                | 103u8..=104u8
                                | 106u8..=107u8
                                | 109u8
                                | 111u8..=113u8
                                | 117u8
                                | 119u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                118u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 47usize;
                                }
                                80u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 60usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 61usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 62usize;
                                }
                                98u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 63usize;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 64usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 65usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 66usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 67usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 68usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 69usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 70usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 71usize;
                                }
                                70u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 72usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        47usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 48usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        48usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 317usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        60usize => {
                            match byte {
                                65u8..=81u8 | 83u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                82u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 346usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        61usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 695usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        62usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 266usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        63usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 245usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        64usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 261usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        65usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 288usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        66usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=119u8 | 121u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                120u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 492usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        67usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 537usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        68usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=108u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                109u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 335usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 383usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        69usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=103u8
                                | 105u8..=120u8
                                | 122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                121u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 122usize;
                                }
                                104u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 420usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        70usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=107u8
                                | 109u8..=114u8
                                | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 306usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 307usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 308usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        71usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 469usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        72usize => {
                            match byte {
                                65u8..=84u8 | 86u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                85u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 727usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        122usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=111u8 | 113u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                112u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 123usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        123usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 411usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        245usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 395usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        261usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=108u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                109u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 387usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 388usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        266usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8 | 99u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                98u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 267usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        267usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 692usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        288usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 74usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        74usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuNull;
                                    state = 75usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        75usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        306usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 607usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        307usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=108u8 | 110u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                109u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuAsm;
                                    state = 476usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        308usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 442usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        317usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 389usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        335usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 336usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        336usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=102u8 | 104u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuImaginary;
                                    state = 464usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        346usize => {
                            match byte {
                                65u8..=68u8 | 70u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                69u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 347usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        347usize => {
                            match byte {
                                65u8..=83u8 | 85u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                84u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 605usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        383usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 279usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        279usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 280usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        280usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 381usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        381usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuInline;
                                    state = 382usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        382usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 149usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        149usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuInline;
                                    state = 150usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        150usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        387usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=111u8 | 113u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                112u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 502usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        388usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=114u8 | 116u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 676usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        389usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 17usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        17usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 18usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        18usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 42usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        42usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuVolatile;
                                    state = 88usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        88usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 89usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        89usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuVolatile;
                                    state = 372usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        372usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        395usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 396usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        396usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 250usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        250usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 251usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        251usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 487usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        411usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 700usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        420usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 421usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        421usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 723usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        442usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 480usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        443usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 444usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        444usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 536usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        464usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 329usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        329usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuImaginary;
                                    state = 330usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        330usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        469usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 576usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        476usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 704usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        480usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 481usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        481usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8 | 99u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                98u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 491usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        487usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 587usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        491usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 450usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        450usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 451usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        451usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuAttribute;
                                    state = 649usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        492usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 664usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        502usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 503usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        503usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 566usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        536usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::BoolType;
                                    state = 584usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        537usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=102u8 | 104u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 467usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        467usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 468usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        468usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 510usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        510usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=99u8 | 101u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuSigned;
                                    state = 534usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        534usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 535usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        535usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuSigned;
                                    state = 275usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        275usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        566usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=119u8 | 121u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                120u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 567usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        567usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 301usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        301usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuComplex;
                                    state = 15usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        15usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        576usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=98u8 | 100u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 577usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        577usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 506usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        506usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuFunc;
                                    state = 413usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        413usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        584usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        587usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=110u8
                                | 112u8..=117u8
                                | 119u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                118u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 80usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 438usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        80usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 81usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        81usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 656usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        438usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=101u8 | 103u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 439usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        439usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=101u8 | 103u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 93usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        93usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=114u8 | 116u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 94usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        94usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 281usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        281usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 282usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        282usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 588usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        588usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=101u8 | 103u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuBuiltInOffsetOf;
                                    state = 707usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        605usize => {
                            match byte {
                                65u8..=83u8 | 85u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                84u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 606usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        606usize => {
                            match byte {
                                65u8..=88u8 | 90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                89u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 370usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        370usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 371usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        371usize => {
                            match byte {
                                65u8..=69u8 | 71u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                70u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 26usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        26usize => {
                            match byte {
                                65u8..=84u8 | 86u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                85u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 27usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        27usize => {
                            match byte {
                                65u8..=77u8 | 79u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                78u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 579usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        579usize => {
                            match byte {
                                65u8..=66u8 | 68u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                67u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 728usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        607usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=102u8 | 104u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 118usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        118usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 24usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        24usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 25usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        25usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=101u8 | 103u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuAlignOf;
                                    state = 142usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        142usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 498usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        498usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuAlignOf;
                                    state = 631usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        631usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        649usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 522usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        522usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuAttribute;
                                    state = 523usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        523usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        656usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 621usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        621usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 622usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        622usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=102u8 | 104u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuBuiltInVaArg;
                                    state = 717usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        664usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 527usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        527usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 528usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        528usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=114u8 | 116u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 619usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        619usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 620usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        620usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 460usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        460usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 461usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        461usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 456usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        456usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuExtension;
                                    state = 36usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        36usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        676usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuConst;
                                    state = 115usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        115usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        692usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 693usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        693usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 514usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        514usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuLabel;
                                    state = 515usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        515usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        695usize => {
                            match byte {
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 2usize;
                                }
                                65u8..=90u8 | 95u8 | 98u8..=114u8 | 116u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 131usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        2usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 5usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        5usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 683usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        131usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuReal;
                                    state = 132usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        132usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 126usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        126usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuReal;
                                    state = 127usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        127usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        683usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 43usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        43usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=98u8 | 100u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                99u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 44usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        44usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuRestrict;
                                    state = 410usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        410usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 594usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        594usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuRestrict;
                                    state = 484usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        484usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        700usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=101u8 | 103u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuTypeof;
                                    state = 640usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        640usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        703usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=108u8 | 110u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                109u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 551usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        551usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 552usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        552usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=102u8 | 104u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                103u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 477usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        477usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 478usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        478usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 572usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        572usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 255usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        255usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 256usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        256usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=120u8 | 122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                121u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::ImaginaryType;
                                    state = 374usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        374usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        704usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuAsm;
                                    state = 597usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        597usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        707usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        717usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        723usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 618usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        618usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=99u8 | 101u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuThread;
                                    state = 238usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        238usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        727usize => {
                            match byte {
                                65u8..=77u8 | 79u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                78u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 55usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        55usize => {
                            match byte {
                                65u8..=66u8 | 68u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                67u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 56usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        56usize => {
                            match byte {
                                65u8..=83u8 | 85u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                84u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 516usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        516usize => {
                            match byte {
                                65u8..=72u8 | 74u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                73u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 137usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        137usize => {
                            match byte {
                                65u8..=78u8 | 80u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                79u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 138usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        138usize => {
                            match byte {
                                65u8..=77u8 | 79u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                78u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 759usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        728usize => {
                            match byte {
                                65u8..=83u8 | 85u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                84u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 628usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        628usize => {
                            match byte {
                                65u8..=72u8 | 74u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                73u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 390usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        390usize => {
                            match byte {
                                65u8..=78u8 | 80u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                79u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 391usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        391usize => {
                            match byte {
                                65u8..=77u8 | 79u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                78u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 724usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        724usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 259usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        259usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuPrettyFunction;
                                    state = 260usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        260usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        748usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 578usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        578usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=108u8 | 110u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                109u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 363usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        363usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=111u8 | 113u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                112u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 364usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        364usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 547usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        547usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 548usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        548usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=119u8 | 121u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                120u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::ComplexType;
                                    state = 626usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        626usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        750usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        752usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 40usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        40usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 41usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        41usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=110u8 | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Auto;
                                    state = 327usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        327usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        754usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=120u8 | 122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                121u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 730usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        730usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=111u8 | 113u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                112u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 13usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        13usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 14usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        14usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=99u8 | 101u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                100u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 687usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        687usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 546usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        546usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=101u8 | 103u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Typedef;
                                    state = 432usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        432usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        755usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 97u8..=100u8
                                | 102u8..=110u8
                                | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Do;
                                    state = 134usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 417usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        134usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 135usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        135usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8 | 99u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                98u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 333usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        333usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 334usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        334usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Double;
                                    state = 569usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        417usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=101u8 | 103u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                102u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 418usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        418usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 331usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        331usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 332usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        332usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=107u8 | 109u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                108u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 530usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        530usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Default;
                                    state = 392usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        392usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        569usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        756usize => {
                            match byte {
                                61u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::SetOp;
                                    break;
                                }
                                38u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::LogicalAnd;
                                    break;
                                }
                                _ => break,
                            }
                        }
                        757usize => {
                            match byte {
                                65u8..=90u8
                                | 95u8
                                | 98u8..=103u8
                                | 105u8..=110u8
                                | 112u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                104u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 653usize;
                                }
                                111u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 677usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 764usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        653usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 98u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                97u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 654usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        654usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=113u8 | 115u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                114u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Char;
                                    state = 669usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        669usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        677usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 361usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        361usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=114u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 343usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 362usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        343usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=115u8 | 117u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                116u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Const;
                                    state = 344usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        344usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        362usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=104u8 | 106u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                105u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 405usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        405usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=109u8 | 111u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                110u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 350usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        350usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=116u8 | 118u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                117u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 19usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        19usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Continue;
                                    state = 20usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        20usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        759usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 341usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        341usize => {
                            match byte {
                                65u8..=90u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                95u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::GnuFunction;
                                    state = 342usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        342usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        762usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        764usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=114u8 | 116u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                115u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 242usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        242usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=100u8 | 102u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                101u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Case;
                                    state = 243usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        243usize => {
                            match byte {
                                65u8..=90u8 | 95u8 | 97u8..=122u8 => {
                                    unsafe {
                                        ::lady_deirdre::lexis::LexisSession::submit(session)
                                    };
                                    token = Self::Ident;
                                    state = 3usize;
                                }
                                _ => {
                                    let ch = unsafe {
                                        ::lady_deirdre::lexis::LexisSession::read(session)
                                    };
                                    if char::is_alphabetic(ch) {
                                        unsafe {
                                            ::lady_deirdre::lexis::LexisSession::submit(session)
                                        };
                                        token = Self::Ident;
                                        state = 3usize;
                                    }
                                    break;
                                }
                            }
                        }
                        #[cfg(debug_assertions)]
                        state => {
                            ::core::panicking::panic_fmt(
                                format_args!("Invalid state {0}.", state),
                            );
                        }
                    }
                }
                token
            }
            #[inline(always)]
            fn eoi() -> Self {
                Self::EOI
            }
            #[inline(always)]
            fn mismatch() -> Self {
                Self::Mismatch
            }
            #[inline(always)]
            fn index(self) -> ::lady_deirdre::lexis::TokenIndex {
                self as u8
            }
            #[inline(always)]
            fn describe(
                token: ::lady_deirdre::lexis::TokenIndex,
            ) -> ::std::option::Option<&'static str> {
                if Self::EOI as u8 == token {
                    return ::std::option::Option::Some("<eoi>");
                }
                if Self::Mismatch as u8 == token {
                    return ::std::option::Option::Some("<mismatch>");
                }
                if Self::Auto as u8 == token {
                    return ::std::option::Option::Some("auto");
                }
                if Self::Break as u8 == token {
                    return ::std::option::Option::Some("break");
                }
                if Self::Case as u8 == token {
                    return ::std::option::Option::Some("case");
                }
                if Self::Char as u8 == token {
                    return ::std::option::Option::Some("char");
                }
                if Self::Const as u8 == token {
                    return ::std::option::Option::Some("const");
                }
                if Self::Continue as u8 == token {
                    return ::std::option::Option::Some("continue");
                }
                if Self::Default as u8 == token {
                    return ::std::option::Option::Some("default");
                }
                if Self::Do as u8 == token {
                    return ::std::option::Option::Some("do");
                }
                if Self::Double as u8 == token {
                    return ::std::option::Option::Some("double");
                }
                if Self::Else as u8 == token {
                    return ::std::option::Option::Some("else");
                }
                if Self::Enum as u8 == token {
                    return ::std::option::Option::Some("enum");
                }
                if Self::Extern as u8 == token {
                    return ::std::option::Option::Some("extern");
                }
                if Self::Float as u8 == token {
                    return ::std::option::Option::Some("float");
                }
                if Self::For as u8 == token {
                    return ::std::option::Option::Some("for");
                }
                if Self::Goto as u8 == token {
                    return ::std::option::Option::Some("goto");
                }
                if Self::If as u8 == token {
                    return ::std::option::Option::Some("if");
                }
                if Self::Int as u8 == token {
                    return ::std::option::Option::Some("int");
                }
                if Self::Inline as u8 == token {
                    return ::std::option::Option::Some("inline");
                }
                if Self::Long as u8 == token {
                    return ::std::option::Option::Some("long");
                }
                if Self::Register as u8 == token {
                    return ::std::option::Option::Some("register");
                }
                if Self::Restrict as u8 == token {
                    return ::std::option::Option::Some("restrict");
                }
                if Self::Return as u8 == token {
                    return ::std::option::Option::Some("return");
                }
                if Self::Short as u8 == token {
                    return ::std::option::Option::Some("short");
                }
                if Self::Signed as u8 == token {
                    return ::std::option::Option::Some("signed");
                }
                if Self::Static as u8 == token {
                    return ::std::option::Option::Some("static");
                }
                if Self::Struct as u8 == token {
                    return ::std::option::Option::Some("struct");
                }
                if Self::Switch as u8 == token {
                    return ::std::option::Option::Some("switch");
                }
                if Self::Typedef as u8 == token {
                    return ::std::option::Option::Some("typedef");
                }
                if Self::Union as u8 == token {
                    return ::std::option::Option::Some("union");
                }
                if Self::Unsigned as u8 == token {
                    return ::std::option::Option::Some("unsigned");
                }
                if Self::Void as u8 == token {
                    return ::std::option::Option::Some("void");
                }
                if Self::Volatile as u8 == token {
                    return ::std::option::Option::Some("volatile");
                }
                if Self::While as u8 == token {
                    return ::std::option::Option::Some("while");
                }
                if Self::BoolType as u8 == token {
                    return ::std::option::Option::Some("_Bool");
                }
                if Self::ComplexType as u8 == token {
                    return ::std::option::Option::Some("_Complex");
                }
                if Self::ImaginaryType as u8 == token {
                    return ::std::option::Option::Some("_Imaginary");
                }
                if Self::SizeOf as u8 == token {
                    return ::std::option::Option::Some("sizeof");
                }
                if Self::GnuFunction as u8 == token {
                    return ::std::option::Option::Some("__FUNCTION__");
                }
                if Self::GnuPrettyFunction as u8 == token {
                    return ::std::option::Option::Some("__PRETTY_FUNCTION__");
                }
                if Self::GnuAlignOf as u8 == token {
                    return ::std::option::Option::Some("<gnu align of>");
                }
                if Self::GnuAsm as u8 == token {
                    return ::std::option::Option::Some("<gnu asm>");
                }
                if Self::GnuAttribute as u8 == token {
                    return ::std::option::Option::Some("<gnu attribute>");
                }
                if Self::GnuBuiltInOffsetOf as u8 == token {
                    return ::std::option::Option::Some("__builtin_offsetof");
                }
                if Self::GnuBuiltInVaArg as u8 == token {
                    return ::std::option::Option::Some("__builtin_va_arg");
                }
                if Self::GnuComplex as u8 == token {
                    return ::std::option::Option::Some("__complex__");
                }
                if Self::GnuConst as u8 == token {
                    return ::std::option::Option::Some("__const");
                }
                if Self::GnuExtension as u8 == token {
                    return ::std::option::Option::Some("__extension__");
                }
                if Self::GnuFunc as u8 == token {
                    return ::std::option::Option::Some("__func__");
                }
                if Self::GnuImaginary as u8 == token {
                    return ::std::option::Option::Some("<gnu imaginary>");
                }
                if Self::GnuInline as u8 == token {
                    return ::std::option::Option::Some("<gnu inline>");
                }
                if Self::GnuLabel as u8 == token {
                    return ::std::option::Option::Some("__label__");
                }
                if Self::GnuNull as u8 == token {
                    return ::std::option::Option::Some("__null");
                }
                if Self::GnuReal as u8 == token {
                    return ::std::option::Option::Some("<gnu real>");
                }
                if Self::GnuRestrict as u8 == token {
                    return ::std::option::Option::Some("<gnu restrict>");
                }
                if Self::GnuSigned as u8 == token {
                    return ::std::option::Option::Some("<gnu signed>");
                }
                if Self::GnuThread as u8 == token {
                    return ::std::option::Option::Some("__thread");
                }
                if Self::GnuTypeof as u8 == token {
                    return ::std::option::Option::Some("__typeof");
                }
                if Self::GnuVolatile as u8 == token {
                    return ::std::option::Option::Some("<gnu volatile>");
                }
                if Self::Character as u8 == token {
                    return ::std::option::Option::Some("<character>");
                }
                if Self::String as u8 == token {
                    return ::std::option::Option::Some("<string>");
                }
                if Self::HexNumber as u8 == token {
                    return ::std::option::Option::Some("<hex number>");
                }
                if Self::Number as u8 == token {
                    return ::std::option::Option::Some("<number>");
                }
                if Self::DotNumber as u8 == token {
                    return ::std::option::Option::Some("<dot number>");
                }
                if Self::Backslash as u8 == token {
                    return ::std::option::Option::Some("<backslash>");
                }
                if Self::POpen as u8 == token {
                    return ::std::option::Option::Some("(");
                }
                if Self::PClose as u8 == token {
                    return ::std::option::Option::Some(")");
                }
                if Self::BkOpen as u8 == token {
                    return ::std::option::Option::Some("[");
                }
                if Self::BkClose as u8 == token {
                    return ::std::option::Option::Some("]");
                }
                if Self::BcOpen as u8 == token {
                    return ::std::option::Option::Some("{");
                }
                if Self::BcClose as u8 == token {
                    return ::std::option::Option::Some("}");
                }
                if Self::Semicolon as u8 == token {
                    return ::std::option::Option::Some(";");
                }
                if Self::Comma as u8 == token {
                    return ::std::option::Option::Some(",");
                }
                if Self::Dot as u8 == token {
                    return ::std::option::Option::Some(".");
                }
                if Self::Colon as u8 == token {
                    return ::std::option::Option::Some(":");
                }
                if Self::Ident as u8 == token {
                    return ::std::option::Option::Some("<ident>");
                }
                if Self::Hash as u8 == token {
                    return ::std::option::Option::Some("#");
                }
                if Self::DHash as u8 == token {
                    return ::std::option::Option::Some("##");
                }
                if Self::IncludeDirective as u8 == token {
                    return ::std::option::Option::Some("<include directive>");
                }
                if Self::DefineDirective as u8 == token {
                    return ::std::option::Option::Some("<define directive>");
                }
                if Self::IfDirective as u8 == token {
                    return ::std::option::Option::Some("<if directive>");
                }
                if Self::IfDefDirective as u8 == token {
                    return ::std::option::Option::Some("<if def directive>");
                }
                if Self::IfNotDefDirective as u8 == token {
                    return ::std::option::Option::Some("<if not def directive>");
                }
                if Self::ElseDirective as u8 == token {
                    return ::std::option::Option::Some("<else directive>");
                }
                if Self::ElseIfDirective as u8 == token {
                    return ::std::option::Option::Some("<else if directive>");
                }
                if Self::ElseIfDefDirective as u8 == token {
                    return ::std::option::Option::Some("<else if def directive>");
                }
                if Self::ElseIfNotDefDirective as u8 == token {
                    return ::std::option::Option::Some("<else if not def directive>");
                }
                if Self::EndIfDirective as u8 == token {
                    return ::std::option::Option::Some("<end if directive>");
                }
                if Self::PragmaDirective as u8 == token {
                    return ::std::option::Option::Some("<pragma directive>");
                }
                if Self::ErrorDirective as u8 == token {
                    return ::std::option::Option::Some("<error directive>");
                }
                if Self::WarnDirective as u8 == token {
                    return ::std::option::Option::Some("<warn directive>");
                }
                if Self::LineDirective as u8 == token {
                    return ::std::option::Option::Some("<line directive>");
                }
                if Self::Whitespace as u8 == token {
                    return ::std::option::Option::Some("<whitespace>");
                }
                if Self::NewLine as u8 == token {
                    return ::std::option::Option::Some("<new line>");
                }
                if Self::MlComment as u8 == token {
                    return ::std::option::Option::Some("<ml comment>");
                }
                if Self::Comment as u8 == token {
                    return ::std::option::Option::Some("<comment>");
                }
                if Self::Tilde as u8 == token {
                    return ::std::option::Option::Some("~");
                }
                if Self::Bang as u8 == token {
                    return ::std::option::Option::Some("!");
                }
                if Self::Inc as u8 == token {
                    return ::std::option::Option::Some("++");
                }
                if Self::Dec as u8 == token {
                    return ::std::option::Option::Some("--");
                }
                if Self::Add as u8 == token {
                    return ::std::option::Option::Some("+");
                }
                if Self::Sub as u8 == token {
                    return ::std::option::Option::Some("-");
                }
                if Self::Star as u8 == token {
                    return ::std::option::Option::Some("*");
                }
                if Self::Slash as u8 == token {
                    return ::std::option::Option::Some("/");
                }
                if Self::Percent as u8 == token {
                    return ::std::option::Option::Some("%");
                }
                if Self::BitShift as u8 == token {
                    return ::std::option::Option::Some("<bit shift>");
                }
                if Self::Amp as u8 == token {
                    return ::std::option::Option::Some("&");
                }
                if Self::Pipe as u8 == token {
                    return ::std::option::Option::Some("|");
                }
                if Self::Xor as u8 == token {
                    return ::std::option::Option::Some("^");
                }
                if Self::BoolOp as u8 == token {
                    return ::std::option::Option::Some("<bool op>");
                }
                if Self::EqOrNot as u8 == token {
                    return ::std::option::Option::Some("<eq or not>");
                }
                if Self::LogicalAnd as u8 == token {
                    return ::std::option::Option::Some("&&");
                }
                if Self::LogicalOr as u8 == token {
                    return ::std::option::Option::Some("||");
                }
                if Self::Quest as u8 == token {
                    return ::std::option::Option::Some("?");
                }
                if Self::SetOp as u8 == token {
                    return ::std::option::Option::Some("<set op>");
                }
                if Self::Set as u8 == token {
                    return ::std::option::Option::Some("=");
                }
                if Self::Unreachable as u8 == token {
                    return ::std::option::Option::Some("<unreachable>");
                }
                None
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for CToken {}
        #[automatically_derived]
        impl ::core::cmp::Eq for CToken {
            #[inline]
            #[doc(hidden)]
            #[no_coverage]
            fn assert_receiver_is_total_eq(&self) -> () {}
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for CToken {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for CToken {
            #[inline]
            fn eq(&self, other: &CToken) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
            }
        }
    }
    pub mod syntax {
        #![allow(unused_imports)]
        use super::lexis::CToken;
        use lady_deirdre::{
            lexis::TokenRef, syntax::{Node, NodeRef, SyntaxError, SyntaxSession},
        };
        const VALUE_RULE: u16 = 10;
        const IF_RULE: u16 = 11;
        const SWITCH_RULE: u16 = 12;
        const WHILE_RULE: u16 = 13;
        const FOR_RULE: u16 = 14;
        const DO_WHILE_RULE: u16 = 15;
        const BASIC_TYPE_RULE: u16 = 30;
        #[token(CToken)]
        #[error(SyntaxError)]
        #[trivia(
            $Whitespace|$NewLine|$Unreachable|$IfDirective|$IfDefDirective|$IfNotDefDirective|$ElseDirective|$ElseIfDirective|$ElseIfDefDirective|$ElseIfNotDefDirective|$EndIfDirective|$PragmaDirective|$ErrorDirective|$WarnDirective|$LineDirective|$Comment|$MlComment
        )]
        pub enum CNode {
            #[root]
            #[rule(items:RootItem*)]
            Root { items: Vec<NodeRef> },
            #[rule(item:(Typedef|StructTypeDef|Definition))]
            RootItem { item: NodeRef },
            #[rule(
                $Struct(
                    (
                        (name:$Ident)($BcOpen(items:StructDefinition)*$BcClose)?
                    )|($BcOpen(items:StructDefinition)*$BcClose)
                )
            )]
            StructType { name: TokenRef, items: Vec<NodeRef> },
            #[index(BASIC_TYPE_RULE)]
            #[rule(
                tokens:(
                    (
                        $Unsigned|$Signed|$Long|$Int|$Char|$Float|$Double|$BoolType|$ComplexType|$ImaginaryType|$GnuComplex
                    )+|($Ident)
                )
            )]
            BasicType { tokens: Vec<TokenRef> },
            #[rule(
                $Enum(
                    (
                        (name:$Ident)($BcOpen(items:Value)$BcClose)?
                    )|($BcOpen(items:Value)$BcClose)
                )
            )]
            EnumType { name: TokenRef, items: NodeRef },
            #[rule(
                $Union(
                    (
                        (name:$Ident)($BcOpen(items:StructDefinition)*$BcClose)?
                    )|($BcOpen(items:StructDefinition)*$BcClose)
                )
            )]
            UnionType { name: TokenRef, items: Vec<NodeRef> },
            #[rule((val:(StructType|BasicType|EnumType|UnionType))(ptr:($Star|$Amp)*))]
            Type { val: NodeRef, ptr: Vec<TokenRef> },
            #[rule($Typedef(type_:Type)(name:$Ident)?)]
            Typedef { type_: NodeRef, name: TokenRef },
            #[rule(
                (
                    type_:(StructType|BasicType|EnumType|UnionType)
                )(ptr:($Star|$Amp)*)(name:$Ident)$Semicolon
            )]
            StructDefinition { type_: NodeRef, ptr: Vec<TokenRef>, name: TokenRef },
            #[rule(
                (
                    type_:(StructType|UnionType)
                )(
                    ptr:$Star*
                )(
                    (
                        (name:$Ident)(next:(StructTypeDefValue|FuncDef))
                    )|(
                        $POpen(
                            (func:$Star)(name:$Ident)
                        )$PClose$POpen(
                            args:FuncArg
                        )*{$Comma}$PClose(next:DefinitionValue)
                    )
                )
            )]
            StructTypeDef {
                type_: NodeRef,
                ptr: Vec<TokenRef>,
                func: TokenRef,
                name: TokenRef,
                args: Vec<NodeRef>,
                next: NodeRef,
            },
            #[rule(
                (
                    array:ArrayIndex
                )?(
                    $SetOp(value:(Value|StructValue))
                )?($Comma(next:StructTypeDefValueNext))*$Semicolon
            )]
            StructTypeDefValue { array: NodeRef, value: NodeRef, next: Vec<NodeRef> },
            #[rule((name:$Ident)(array:ArrayIndex)?($SetOp(value:(Value|StructValue)))?)]
            StructTypeDefValueNext { name: TokenRef, array: NodeRef, value: NodeRef },
            #[rule(
                (
                    type_:(EnumType|BasicType)
                )(
                    ptr:$Star*
                )(
                    (
                        (name:$Ident)(next:(DefinitionValue|FuncDef))
                    )|(
                        $POpen(
                            (func:$Star)(name:$Ident)
                        )$PClose$POpen(
                            args:FuncArg
                        )*{$Comma}$PClose(next:DefinitionValue)
                    )
                )
            )]
            Definition {
                type_: NodeRef,
                ptr: Vec<TokenRef>,
                func: TokenRef,
                name: TokenRef,
                args: Vec<NodeRef>,
                next: NodeRef,
            },
            #[rule(
                (
                    array:ArrayIndex
                )?($SetOp(value:Value))?($Comma(next:DefinitionValueNext))*$Semicolon
            )]
            DefinitionValue { array: NodeRef, value: NodeRef, next: Vec<NodeRef> },
            #[rule((name:$Ident)(array:ArrayIndex)?($SetOp(value:Value))?)]
            DefinitionValueNext { name: TokenRef, array: NodeRef, value: NodeRef },
            #[rule($POpen(args:FuncArg)*{$Comma}$PClose((block:CodeBlock)|$Semicolon))]
            FuncDef { args: Vec<NodeRef>, block: NodeRef },
            #[rule(
                (
                    type_:Type
                )(
                    (
                        name:$Ident
                    )|(
                        $POpen(
                            (func:$Star)(name:$Ident)?
                        )$PClose$POpen(args:FuncArg)*{$Comma}$PClose
                    )
                )?
            )]
            FuncArg {
                type_: NodeRef,
                name: TokenRef,
                func: TokenRef,
                args: Vec<NodeRef>,
            },
            #[rule($BcOpen(items:Action*)$BcClose)]
            CodeBlock { items: Vec<NodeRef> },
            #[parser(parse_action)]
            #[rule((val:Value)$Semicolon)]
            Action { val: NodeRef },
            Label { name: TokenRef },
            #[index(IF_RULE)]
            #[rule($If$POpen(cond:Value)$PClose(action:Action)($Else(next:Action))?)]
            IfStatement { cond: NodeRef, action: NodeRef, next: NodeRef },
            #[index(SWITCH_RULE)]
            #[rule($Switch$POpen(val:Value)$PClose(block:CodeBlock))]
            SwitchStatement { val: NodeRef, block: NodeRef },
            #[index(WHILE_RULE)]
            #[rule($While$POpen(cond:Value)$PClose(action:Action))]
            WhileStatement { cond: NodeRef, action: NodeRef },
            #[index(DO_WHILE_RULE)]
            #[rule($Do(action:Action)$While$POpen(cond:Value)$PClose$Semicolon)]
            DoWhileStatement { action: NodeRef, cond: NodeRef },
            #[index(FOR_RULE)]
            #[rule(
                $For$POpen(
                    def:Action
                )(cond:Value)$Semicolon(inn_action:Value)$PClose(action:Action)
            )]
            ForStatement {
                def: NodeRef,
                cond: NodeRef,
                inn_action: NodeRef,
                action: NodeRef,
            },
            #[rule($BkOpen(value:Value12)?$BkClose)]
            ArrayIndex { value: NodeRef },
            #[rule($BcOpen$BcClose)]
            StructValue {},
            #[rule(token:($Number|$HexNumber|$DotNumber))]
            Number { token: TokenRef },
            #[rule(tokens:$String+)]
            String { tokens: Vec<TokenRef> },
            #[rule(token:$Char)]
            Char { token: TokenRef },
            #[rule(first:$Ident)]
            IdentVal { first: TokenRef },
            #[rule($POpen(val:(Value|CodeBlock))?$PClose)]
            ParentVal { val: NodeRef },
            #[rule(
                (
                    ops:(
                        $Tilde|$Bang|$Inc|$Dec|$Sub|$Add|$SizeOf|$Star|$Amp|$GnuReal|$GnuImaginary
                    )
                )*(val:(IdentVal|ParentVal|String|Number|Char))(post_ops:PostOperator)*
            )]
            UnVal { val: NodeRef, ops: Vec<TokenRef>, post_ops: Vec<NodeRef> },
            #[rule($Dot(id:$Ident))]
            PostPath { id: TokenRef },
            #[rule(val:(PostPath|IncDec|ArrayIndex|ParentVal))]
            PostOperator { val: NodeRef },
            #[rule(tokens:($Inc|$Dec)+)]
            IncDec { tokens: Vec<TokenRef> },
            #[rule((values:UnVal)+{ops:($Star|$Slash|$Percent)})]
            Value1 { values: Vec<NodeRef>, ops: Vec<TokenRef> },
            #[rule((values:Value1)+{ops:($Add|$Sub)})]
            Value2 { values: Vec<NodeRef>, ops: Vec<TokenRef> },
            #[rule((values:Value2)+{ops:$BitShift})]
            Value3 { values: Vec<NodeRef>, ops: Vec<TokenRef> },
            #[rule((values:Value3)+{ops:$BoolOp})]
            Value4 { values: Vec<NodeRef>, ops: Vec<TokenRef> },
            #[rule((values:Value4)+{ops:$EqOrNot})]
            Value5 { values: Vec<NodeRef>, ops: Vec<TokenRef> },
            #[rule((values:Value5)+{$Amp})]
            Value6 { values: Vec<NodeRef> },
            #[rule((values:Value6)+{$Xor})]
            Value7 { values: Vec<NodeRef> },
            #[rule((values:Value7)+{$Pipe})]
            Value8 { values: Vec<NodeRef> },
            #[rule((values:Value8)+{$LogicalAnd})]
            Value9 { values: Vec<NodeRef> },
            #[rule((values:Value9)+{$LogicalOr})]
            Value10 { values: Vec<NodeRef> },
            #[rule((cond:Value10)($Quest(value1:Value10)$Colon(value2:Value10))?)]
            Value11 { cond: NodeRef, value1: NodeRef, value2: NodeRef },
            #[rule((values:Value11)+{ops:($SetOp|$Set)})]
            Value12 { values: Vec<NodeRef>, ops: Vec<TokenRef> },
            #[index(VALUE_RULE)]
            #[rule((values:Value12)+{$Comma})]
            Value { values: Vec<NodeRef> },
            Mismatch { tokens: Vec<TokenRef>, nodes: Vec<NodeRef> },
        }
        impl ::lady_deirdre::syntax::Node for CNode {
            type Token = CToken;
            type Error = SyntaxError;
            #[inline(always)]
            fn parse<'code>(
                rule: ::lady_deirdre::syntax::RuleIndex,
                session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                    'code,
                    Node = Self,
                >,
            ) -> Self {
                static RULES_1: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[1u16],
                );
                static RULES_2: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[2u16, 38u16, 39u16],
                );
                static RULES_3: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[3u16, 30u16],
                );
                static RULES_4: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[35u16, 37u16],
                );
                static RULES_5: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[31u16],
                );
                static RULES_6: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[3u16],
                );
                static RULES_7: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[4u16],
                );
                static RULES_8: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[25u16],
                );
                static RULES_9: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[29u16],
                );
                static RULES_10: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[5u16],
                );
                static RULES_11: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[6u16],
                );
                static RULES_12: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[7u16],
                );
                static RULES_13: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[8u16],
                );
                static RULES_14: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[9u16],
                );
                static RULES_15: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[10u16],
                );
                static RULES_16: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[11u16],
                );
                static RULES_17: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[12u16],
                );
                static RULES_18: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[13u16],
                );
                static RULES_19: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[14u16],
                );
                static RULES_20: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[15u16],
                );
                static RULES_21: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[16u16],
                );
                static RULES_22: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[17u16],
                );
                static RULES_23: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[18u16, 22u16, 26u16, 27u16, 28u16],
                );
                static RULES_24: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[4u16, 20u16, 21u16, 22u16],
                );
                static RULES_25: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[23u16, 25u16],
                );
                static RULES_26: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[24u16],
                );
                static RULES_27: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[23u16],
                );
                static RULES_28: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[32u16],
                );
                static RULES_29: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[33u16, 35u16, 36u16, 37u16],
                );
                static RULES_30: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[34u16],
                );
                static RULES_31: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[33u16, 36u16],
                );
                static RULES_32: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[30u16, 40u16],
                );
                static RULES_33: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[42u16],
                );
                static RULES_34: ::lady_deirdre::syntax::RuleSet = ::lady_deirdre::syntax::RuleSet::new(
                    &[25u16, 41u16],
                );
                static TOKENS_1: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Comment as u8,
                        CToken::ElseDirective as u8,
                        CToken::ElseIfDefDirective as u8,
                        CToken::ElseIfDirective as u8,
                        CToken::ElseIfNotDefDirective as u8,
                        CToken::EndIfDirective as u8,
                        CToken::ErrorDirective as u8,
                        CToken::IfDefDirective as u8,
                        CToken::IfDirective as u8,
                        CToken::IfNotDefDirective as u8,
                        CToken::LineDirective as u8,
                        CToken::MlComment as u8,
                        CToken::NewLine as u8,
                        CToken::PragmaDirective as u8,
                        CToken::Unreachable as u8,
                        CToken::WarnDirective as u8,
                        CToken::Whitespace as u8,
                    ],
                );
                static TOKENS_2: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Enum as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::Ident as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::Signed as u8,
                        CToken::Struct as u8,
                        CToken::Typedef as u8,
                        CToken::Union as u8,
                        CToken::Unsigned as u8,
                    ],
                );
                static TOKENS_3: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Enum as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::Ident as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::Signed as u8,
                        CToken::Struct as u8,
                        CToken::Typedef as u8,
                        CToken::Union as u8,
                        CToken::Unsigned as u8,
                        ::lady_deirdre::lexis::EOI,
                    ],
                );
                static TOKENS_4: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Enum as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::Ident as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::Signed as u8,
                        CToken::Unsigned as u8,
                    ],
                );
                static TOKENS_5: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Struct as u8, CToken::Union as u8],
                );
                static TOKENS_6: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::POpen as u8],
                );
                static TOKENS_7: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Enum as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::Ident as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::Signed as u8,
                        CToken::Struct as u8,
                        CToken::Union as u8,
                        CToken::Unsigned as u8,
                    ],
                );
                static TOKENS_8: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BkOpen as u8,
                        CToken::Comma as u8,
                        CToken::Semicolon as u8,
                        CToken::SetOp as u8,
                    ],
                );
                static TOKENS_9: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BkOpen as u8,
                        CToken::Comma as u8,
                        CToken::POpen as u8,
                        CToken::Semicolon as u8,
                        CToken::SetOp as u8,
                    ],
                );
                static TOKENS_10: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Ident as u8],
                );
                static TOKENS_11: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Ident as u8, CToken::POpen as u8, CToken::Star as u8],
                );
                static TOKENS_12: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Comma as u8, CToken::PClose as u8],
                );
                static TOKENS_13: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::Ident as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::Signed as u8,
                        CToken::Unsigned as u8,
                    ],
                );
                static TOKENS_14: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::PClose as u8],
                );
                static TOKENS_15: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Enum as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::Ident as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::PClose as u8,
                        CToken::Signed as u8,
                        CToken::Struct as u8,
                        CToken::Union as u8,
                        CToken::Unsigned as u8,
                    ],
                );
                static TOKENS_16: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Star as u8],
                );
                static TOKENS_17: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Comma as u8, CToken::Semicolon as u8],
                );
                static TOKENS_18: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Comma as u8],
                );
                static TOKENS_19: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Comma as u8, CToken::Semicolon as u8, CToken::SetOp as u8],
                );
                static TOKENS_20: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Add as u8,
                        CToken::Amp as u8,
                        CToken::Bang as u8,
                        CToken::Char as u8,
                        CToken::Dec as u8,
                        CToken::DotNumber as u8,
                        CToken::GnuImaginary as u8,
                        CToken::GnuReal as u8,
                        CToken::HexNumber as u8,
                        CToken::Ident as u8,
                        CToken::Inc as u8,
                        CToken::Number as u8,
                        CToken::POpen as u8,
                        CToken::SizeOf as u8,
                        CToken::Star as u8,
                        CToken::String as u8,
                        CToken::Sub as u8,
                        CToken::Tilde as u8,
                    ],
                );
                static TOKENS_21: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BkOpen as u8],
                );
                static TOKENS_22: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BkClose as u8, CToken::BkOpen as u8],
                );
                static TOKENS_23: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BkClose as u8],
                );
                static TOKENS_24: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Add as u8,
                        CToken::Amp as u8,
                        CToken::Bang as u8,
                        CToken::BkClose as u8,
                        CToken::Char as u8,
                        CToken::Dec as u8,
                        CToken::DotNumber as u8,
                        CToken::GnuImaginary as u8,
                        CToken::GnuReal as u8,
                        CToken::HexNumber as u8,
                        CToken::Ident as u8,
                        CToken::Inc as u8,
                        CToken::Number as u8,
                        CToken::POpen as u8,
                        CToken::SizeOf as u8,
                        CToken::Star as u8,
                        CToken::String as u8,
                        CToken::Sub as u8,
                        CToken::Tilde as u8,
                    ],
                );
                static TOKENS_25: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Set as u8, CToken::SetOp as u8],
                );
                static TOKENS_26: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Quest as u8],
                );
                static TOKENS_27: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Colon as u8],
                );
                static TOKENS_28: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::LogicalOr as u8],
                );
                static TOKENS_29: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::LogicalAnd as u8],
                );
                static TOKENS_30: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Pipe as u8],
                );
                static TOKENS_31: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Xor as u8],
                );
                static TOKENS_32: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::EqOrNot as u8],
                );
                static TOKENS_33: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BoolOp as u8],
                );
                static TOKENS_34: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BitShift as u8],
                );
                static TOKENS_35: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Add as u8, CToken::Sub as u8],
                );
                static TOKENS_36: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Percent as u8, CToken::Slash as u8, CToken::Star as u8],
                );
                static TOKENS_37: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Add as u8,
                        CToken::Amp as u8,
                        CToken::Bang as u8,
                        CToken::Dec as u8,
                        CToken::GnuImaginary as u8,
                        CToken::GnuReal as u8,
                        CToken::Inc as u8,
                        CToken::SizeOf as u8,
                        CToken::Star as u8,
                        CToken::Sub as u8,
                        CToken::Tilde as u8,
                    ],
                );
                static TOKENS_38: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::DotNumber as u8,
                        CToken::HexNumber as u8,
                        CToken::Number as u8,
                    ],
                );
                static TOKENS_39: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BkOpen as u8,
                        CToken::Dec as u8,
                        CToken::Dot as u8,
                        CToken::Inc as u8,
                        CToken::POpen as u8,
                    ],
                );
                static TOKENS_40: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Char as u8],
                );
                static TOKENS_41: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Dec as u8, CToken::Inc as u8],
                );
                static TOKENS_42: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Dot as u8],
                );
                static TOKENS_43: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::PClose as u8, CToken::POpen as u8],
                );
                static TOKENS_44: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Add as u8,
                        CToken::Amp as u8,
                        CToken::Bang as u8,
                        CToken::BcOpen as u8,
                        CToken::Char as u8,
                        CToken::Dec as u8,
                        CToken::DotNumber as u8,
                        CToken::GnuImaginary as u8,
                        CToken::GnuReal as u8,
                        CToken::HexNumber as u8,
                        CToken::Ident as u8,
                        CToken::Inc as u8,
                        CToken::Number as u8,
                        CToken::PClose as u8,
                        CToken::POpen as u8,
                        CToken::SizeOf as u8,
                        CToken::Star as u8,
                        CToken::String as u8,
                        CToken::Sub as u8,
                        CToken::Tilde as u8,
                    ],
                );
                static TOKENS_45: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BcOpen as u8],
                );
                static TOKENS_46: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BcClose as u8, CToken::BcOpen as u8],
                );
                static TOKENS_47: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BcClose as u8],
                );
                static TOKENS_48: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Add as u8,
                        CToken::Amp as u8,
                        CToken::Bang as u8,
                        CToken::BcClose as u8,
                        CToken::Char as u8,
                        CToken::Dec as u8,
                        CToken::DotNumber as u8,
                        CToken::GnuImaginary as u8,
                        CToken::GnuReal as u8,
                        CToken::HexNumber as u8,
                        CToken::Ident as u8,
                        CToken::Inc as u8,
                        CToken::Number as u8,
                        CToken::POpen as u8,
                        CToken::SizeOf as u8,
                        CToken::Star as u8,
                        CToken::String as u8,
                        CToken::Sub as u8,
                        CToken::Tilde as u8,
                    ],
                );
                static TOKENS_49: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::String as u8],
                );
                static TOKENS_50: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::SetOp as u8],
                );
                static TOKENS_51: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Semicolon as u8],
                );
                static TOKENS_52: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BcOpen as u8, CToken::Semicolon as u8],
                );
                static TOKENS_53: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Ident as u8, CToken::PClose as u8],
                );
                static TOKENS_54: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Amp as u8, CToken::Star as u8],
                );
                static TOKENS_55: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Struct as u8],
                );
                static TOKENS_56: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::BcOpen as u8, CToken::Ident as u8],
                );
                static TOKENS_57: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BcClose as u8,
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Enum as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::Ident as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::Signed as u8,
                        CToken::Struct as u8,
                        CToken::Union as u8,
                        CToken::Unsigned as u8,
                    ],
                );
                static TOKENS_58: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Enum as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::Ident as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::Semicolon as u8,
                        CToken::Signed as u8,
                        CToken::Struct as u8,
                        CToken::Union as u8,
                        CToken::Unsigned as u8,
                    ],
                );
                static TOKENS_59: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Amp as u8, CToken::Ident as u8, CToken::Star as u8],
                );
                static TOKENS_60: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Amp as u8,
                        CToken::Ident as u8,
                        CToken::Semicolon as u8,
                        CToken::Star as u8,
                    ],
                );
                static TOKENS_61: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::BoolType as u8,
                        CToken::Char as u8,
                        CToken::ComplexType as u8,
                        CToken::Double as u8,
                        CToken::Float as u8,
                        CToken::GnuComplex as u8,
                        CToken::ImaginaryType as u8,
                        CToken::Int as u8,
                        CToken::Long as u8,
                        CToken::Signed as u8,
                        CToken::Unsigned as u8,
                    ],
                );
                static TOKENS_62: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Union as u8],
                );
                static TOKENS_63: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Enum as u8],
                );
                static TOKENS_64: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Typedef as u8],
                );
                static TOKENS_65: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Add as u8,
                        CToken::Amp as u8,
                        CToken::Bang as u8,
                        CToken::BcOpen as u8,
                        CToken::Char as u8,
                        CToken::Dec as u8,
                        CToken::DotNumber as u8,
                        CToken::GnuImaginary as u8,
                        CToken::GnuReal as u8,
                        CToken::HexNumber as u8,
                        CToken::Ident as u8,
                        CToken::Inc as u8,
                        CToken::Number as u8,
                        CToken::POpen as u8,
                        CToken::SizeOf as u8,
                        CToken::Star as u8,
                        CToken::String as u8,
                        CToken::Sub as u8,
                        CToken::Tilde as u8,
                    ],
                );
                static TOKENS_66: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::If as u8],
                );
                static TOKENS_67: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Else as u8],
                );
                static TOKENS_68: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::While as u8],
                );
                static TOKENS_69: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::For as u8],
                );
                static TOKENS_70: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::PClose as u8, CToken::Semicolon as u8],
                );
                static TOKENS_71: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::POpen as u8, CToken::Semicolon as u8],
                );
                static TOKENS_72: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Do as u8],
                );
                static TOKENS_73: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Do as u8, CToken::Semicolon as u8],
                );
                static TOKENS_74: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[
                        CToken::Add as u8,
                        CToken::Amp as u8,
                        CToken::Bang as u8,
                        CToken::Char as u8,
                        CToken::Dec as u8,
                        CToken::DotNumber as u8,
                        CToken::GnuImaginary as u8,
                        CToken::GnuReal as u8,
                        CToken::HexNumber as u8,
                        CToken::Ident as u8,
                        CToken::Inc as u8,
                        CToken::Number as u8,
                        CToken::POpen as u8,
                        CToken::Semicolon as u8,
                        CToken::SizeOf as u8,
                        CToken::Star as u8,
                        CToken::String as u8,
                        CToken::Sub as u8,
                        CToken::Tilde as u8,
                    ],
                );
                static TOKENS_75: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Semicolon as u8, CToken::While as u8],
                );
                static TOKENS_76: ::lady_deirdre::lexis::TokenSet = ::lady_deirdre::lexis::TokenSet::inclusive(
                    &[CToken::Switch as u8],
                );
                #[allow(unused)]
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn skip_trivia<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    loop {
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_1,
                                    token as u8,
                                ) {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                }
                #[cfg(debug_assertions)]
                #[allow(dead_code)]
                const CHECK_EOI: () = {
                    if CToken::Switch as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::PragmaDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::EqOrNot as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::BcClose as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Int as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Tilde as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Signed as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::BcOpen as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::LineDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Unreachable as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Number as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Bang as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Dec as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Else as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Dot as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Comment as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::SetOp as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::BoolOp as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Inc as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::LogicalAnd as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::WarnDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Float as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Enum as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Semicolon as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::PClose as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::BitShift as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::ElseDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Whitespace as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::ImaginaryType as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Add as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::While as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Do as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::ElseIfDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Xor as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Union as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Star as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Comma as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Slash as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::IfNotDefDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Char as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::BkOpen as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::GnuComplex as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Pipe as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Percent as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::String as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Ident as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::DotNumber as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::IfDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::ElseIfDefDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::LogicalOr as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::ErrorDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Quest as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::SizeOf as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Sub as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::BkClose as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Double as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::If as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::GnuImaginary as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Struct as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::IfDefDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::BoolType as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::HexNumber as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Set as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Unsigned as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::EndIfDirective as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::MlComment as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::NewLine as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::ComplexType as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::POpen as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Colon as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Typedef as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::GnuReal as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Amp as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::Long as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::For as u8 == ::lady_deirdre::lexis::EOI {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    if CToken::ElseIfNotDefDirective as u8 == ::lady_deirdre::lexis::EOI
                    {
                        {
                            ::core::panicking::panic_fmt(
                                format_args!("EOI token cannot be used explicitly."),
                            );
                        };
                    }
                    ()
                };
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Root<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut capture_items = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        skip_trivia(session);
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_2,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            1u16,
                                        ),
                                    );
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_3,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 0u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_1,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Root {
                        items: capture_items,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_RootItem<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_item = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_4,
                                    token as u8,
                                ) {
                                    capture_item = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        2u16,
                                    );
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_5,
                                    token as u8,
                                ) {
                                    capture_item = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        39u16,
                                    );
                                    break;
                                }
                                if token == CToken::Typedef {
                                    capture_item = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        38u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_2,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 1u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_2,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::RootItem {
                        item: capture_item,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Definition<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_args = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    let mut capture_next = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_ptr = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    let mut capture_type_ = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_func = ::lady_deirdre::lexis::TokenRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_13,
                                    token as u8,
                                ) {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        35u16,
                                    );
                                    state = 10usize;
                                    continue;
                                }
                                if token == CToken::Enum {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        37u16,
                                    );
                                    state = 10usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_4,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_4,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 2u16,
                                            expected_tokens: &TOKENS_10,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 9usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_10,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &TOKENS_10,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 9usize;
                                    continue;
                                }
                                if token == CToken::POpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 2u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 12usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_14,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_8,
                                    token as u8,
                                ) {
                                    capture_next = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        3u16,
                                    );
                                    break;
                                }
                                if token == CToken::POpen {
                                    capture_next = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        30u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_9,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_3,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            6usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 8usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_12,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &TOKENS_12,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_8,
                                    token as u8,
                                ) {
                                    capture_next = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        3u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_8,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_6,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            8usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 2u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_5,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                if token == CToken::Comma {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 2u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_5,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_7,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_5,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            9usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 2u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 2u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 12usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_6,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            10usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::Star {
                                    ::std::vec::Vec::push(
                                        &mut capture_ptr,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 11usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_11,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &TOKENS_11,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            11usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Star {
                                    capture_func = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 2u16,
                                            expected_tokens: &TOKENS_16,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_16,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &TOKENS_16,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            12usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_15,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 2u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &RULES_5,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Definition {
                        type_: capture_type_,
                        ptr: capture_ptr,
                        func: capture_func,
                        name: capture_name,
                        args: capture_args,
                        next: capture_next,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_DefinitionValue<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_value = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_array = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_next = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::SetOp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::BkOpen {
                                    capture_array = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        4u16,
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_8,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 3u16,
                                        expected_tokens: &TOKENS_19,
                                        expected_rules: &RULES_7,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    ::std::vec::Vec::push(
                                        &mut capture_next,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 3u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_9,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::std::vec::Vec::push(
                                        &mut capture_next,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 3u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_9,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::Ident {
                                    ::std::vec::Vec::push(
                                        &mut capture_next,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            29u16,
                                        ),
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_10,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 3u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_9,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 3u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 3u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 3u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::SetOp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_19,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 3u16,
                                        expected_tokens: &TOKENS_19,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            6usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 3u16,
                                            expected_tokens: &TOKENS_18,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_next,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            29u16,
                                        ),
                                    );
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_17,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 3u16,
                                        expected_tokens: &TOKENS_17,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::DefinitionValue {
                        array: capture_array,
                        value: capture_value,
                        next: capture_next,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_ArrayIndex<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_value = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BkOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BkClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 4u16,
                                            expected_tokens: &TOKENS_21,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 4u16,
                                            expected_tokens: &TOKENS_21,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        5u16,
                                    );
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_22,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 4u16,
                                        expected_tokens: &TOKENS_21,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::BkClose
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BkClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        5u16,
                                    );
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_24,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 4u16,
                                        expected_tokens: &TOKENS_23,
                                        expected_rules: &RULES_10,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BkClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_23,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 4u16,
                                        expected_tokens: &TOKENS_23,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::ArrayIndex {
                        value: capture_value,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value12<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_ops = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            6u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_25,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 5u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_11,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 5u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_11,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_25,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            6u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_25,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 5u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_11,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 5u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_11,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value12 {
                        values: capture_values,
                        ops: capture_ops,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value11<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_value2 = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_value1 = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_cond = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Quest {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 6u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_12,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_cond = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        7u16,
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 6u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_12,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_value1 = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        7u16,
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Colon {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 6u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_12,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 6u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_12,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Colon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 6u16,
                                            expected_tokens: &TOKENS_27,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_value2 = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        7u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_27,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 6u16,
                                        expected_tokens: &TOKENS_27,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_value2 = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        7u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 6u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_12,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            6usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::Quest {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 6u16,
                                            expected_tokens: &TOKENS_26,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_value1 = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        7u16,
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value11 {
                        cond: capture_cond,
                        value1: capture_value1,
                        value2: capture_value2,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value10<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            8u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::LogicalOr {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 7u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_13,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 7u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_13,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 7u16,
                                            expected_tokens: &TOKENS_28,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            8u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::LogicalOr {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            8u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::LogicalOr {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 7u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_13,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 7u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_13,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value10 {
                        values: capture_values,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value9<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            9u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::LogicalAnd {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 8u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_14,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 8u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_14,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 8u16,
                                            expected_tokens: &TOKENS_29,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            9u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::LogicalAnd {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            9u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::LogicalAnd {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 8u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_14,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 8u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_14,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value9 {
                        values: capture_values,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value8<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            10u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Pipe {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 9u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_15,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 9u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_15,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 9u16,
                                            expected_tokens: &TOKENS_30,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            10u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::Pipe {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            10u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Pipe {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 9u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_15,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 9u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_15,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value8 {
                        values: capture_values,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value7<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            11u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Xor {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 10u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_16,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 10u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_16,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 10u16,
                                            expected_tokens: &TOKENS_31,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            11u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::Xor {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            11u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Xor {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 10u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_16,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 10u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_16,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value7 {
                        values: capture_values,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value6<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            12u16,
                                        ),
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 11u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_17,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            12u16,
                                        ),
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 11u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_17,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::Amp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value6 {
                        values: capture_values,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value5<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_ops = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            13u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::EqOrNot {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 12u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_18,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 12u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_18,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 12u16,
                                            expected_tokens: &TOKENS_32,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            13u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::EqOrNot {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            13u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::EqOrNot {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 12u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_18,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 12u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_18,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value5 {
                        values: capture_values,
                        ops: capture_ops,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value4<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_ops = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            14u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BoolOp {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 13u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_19,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 13u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_19,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 13u16,
                                            expected_tokens: &TOKENS_33,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            14u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::BoolOp {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            14u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BoolOp {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 13u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_19,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 13u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_19,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value4 {
                        values: capture_values,
                        ops: capture_ops,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value3<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_ops = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            15u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BitShift {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 14u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_20,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 14u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_20,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 14u16,
                                            expected_tokens: &TOKENS_34,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            15u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::BitShift {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            15u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BitShift {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 14u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_20,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 14u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_20,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value3 {
                        values: capture_values,
                        ops: capture_ops,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value2<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_ops = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            16u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 15u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_21,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_35,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            16u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 15u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_21,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value2 {
                        values: capture_values,
                        ops: capture_ops,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value1<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_ops = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            17u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 16u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_22,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_36,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            17u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 16u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_22,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value1 {
                        values: capture_values,
                        ops: capture_ops,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_UnVal<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_post_ops = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    let mut capture_val = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_ops = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_37,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ops,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                if token == CToken::Char {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        18u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        26u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_38,
                                    token as u8,
                                ) {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        27u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::POpen {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        22u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::String {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        28u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 17u16,
                                        expected_tokens: &TOKENS_37,
                                        expected_rules: &RULES_23,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_39,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_post_ops,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            19u16,
                                        ),
                                    );
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::UnVal {
                        val: capture_val,
                        ops: capture_ops,
                        post_ops: capture_post_ops,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Char<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_token = ::lady_deirdre::lexis::TokenRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Char {
                                    capture_token = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_40,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 18u16,
                                        expected_tokens: &TOKENS_40,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Char {
                        token: capture_token,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_PostOperator<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_val = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Dot {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        20u16,
                                    );
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_41,
                                    token as u8,
                                ) {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        21u16,
                                    );
                                    break;
                                }
                                if token == CToken::POpen {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        22u16,
                                    );
                                    break;
                                }
                                if token == CToken::BkOpen {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        4u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_39,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 19u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_24,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::PostOperator {
                        val: capture_val,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_PostPath<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_id = ::lady_deirdre::lexis::TokenRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Dot {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 20u16,
                                            expected_tokens: &TOKENS_42,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_id = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_42,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 20u16,
                                        expected_tokens: &TOKENS_42,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    capture_id = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_10,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 20u16,
                                        expected_tokens: &TOKENS_10,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::PostPath { id: capture_id }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_IncDec<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_tokens = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_41,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_tokens,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_41,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 21u16,
                                        expected_tokens: &TOKENS_41,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_41,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_tokens,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::IncDec {
                        tokens: capture_tokens,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_ParentVal<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_val = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_43,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 22u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::PClose
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_14,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 22u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        23u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_44,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 22u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &RULES_25,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::ParentVal {
                        val: capture_val,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_CodeBlock<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_items = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 23u16,
                                            expected_tokens: &TOKENS_45,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            24u16,
                                        ),
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 23u16,
                                            expected_tokens: &TOKENS_45,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_46,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 23u16,
                                        expected_tokens: &TOKENS_45,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::BcClose
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            24u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_48,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 23u16,
                                        expected_tokens: &TOKENS_47,
                                        expected_rules: &RULES_26,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::CodeBlock {
                        items: capture_items,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Value<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_values = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 25u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_10,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            5u16,
                                        ),
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 25u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_10,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 25u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_10,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            5u16,
                                        ),
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 25u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_10,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 25u16,
                                            expected_tokens: &TOKENS_18,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_values,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            5u16,
                                        ),
                                    );
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Value {
                        values: capture_values,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_IdentVal<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_first = ::lady_deirdre::lexis::TokenRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    capture_first = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_10,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 26u16,
                                        expected_tokens: &TOKENS_10,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::IdentVal {
                        first: capture_first,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Number<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_token = ::lady_deirdre::lexis::TokenRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Number {
                                    capture_token = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::HexNumber {
                                    capture_token = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::DotNumber {
                                    capture_token = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_38,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 27u16,
                                        expected_tokens: &TOKENS_38,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Number {
                        token: capture_token,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_String<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_tokens = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::String {
                                    ::std::vec::Vec::push(
                                        &mut capture_tokens,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_49,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 28u16,
                                        expected_tokens: &TOKENS_49,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::String {
                                    ::std::vec::Vec::push(
                                        &mut capture_tokens,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::String {
                        tokens: capture_tokens,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_DefinitionValueNext<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_value = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_array = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BkOpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 29u16,
                                            expected_tokens: &TOKENS_10,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_array = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        4u16,
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::SetOp {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 29u16,
                                            expected_tokens: &TOKENS_10,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_10,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 29u16,
                                        expected_tokens: &TOKENS_10,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::BkOpen {
                                    capture_array = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        4u16,
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::SetOp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::SetOp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 29u16,
                                            expected_tokens: &TOKENS_50,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    break;
                                }
                                break;
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 29u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::DefinitionValueNext {
                        name: capture_name,
                        array: capture_array,
                        value: capture_value,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_FuncDef<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_args = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    let mut capture_block = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 30u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 30u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_6,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 30u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_15,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 30u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &RULES_5,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 30u16,
                                            expected_tokens: &TOKENS_18,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 30u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::BcOpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 30u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_block = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        23u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_12,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 30u16,
                                        expected_tokens: &TOKENS_12,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Comma {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 30u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_5,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 30u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_5,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_7,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 30u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_5,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::BcOpen {
                                    capture_block = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        23u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_52,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 30u16,
                                        expected_tokens: &TOKENS_51,
                                        expected_rules: &RULES_27,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::FuncDef {
                        args: capture_args,
                        block: capture_block,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_FuncArg<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_args = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    let mut capture_func = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_type_ = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        32u16,
                                    );
                                    state = 8usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_7,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 31u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_28,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Star {
                                    capture_func = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &TOKENS_16,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 9usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &TOKENS_16,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 10usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_16,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 31u16,
                                        expected_tokens: &TOKENS_16,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 9usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 10usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_53,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 31u16,
                                        expected_tokens: &TOKENS_53,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_15,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 31u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &RULES_5,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &TOKENS_18,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_12,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 31u16,
                                        expected_tokens: &TOKENS_12,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_5,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::Comma {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_5,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_7,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 31u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_5,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            8usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Star {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_func = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                break;
                            }
                            9usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 10usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_14,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 31u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            10usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 31u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_6,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 31u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::FuncArg {
                        type_: capture_type_,
                        name: capture_name,
                        func: capture_func,
                        args: capture_args,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Type<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_val = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_ptr = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_13,
                                    token as u8,
                                ) {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        35u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Enum {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        37u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Struct {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        33u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Union {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        36u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_7,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 32u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_29,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_54,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ptr,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Type {
                        val: capture_val,
                        ptr: capture_ptr,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_StructType<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_items = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 33u16,
                                            expected_tokens: &TOKENS_55,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Struct {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 33u16,
                                            expected_tokens: &TOKENS_55,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_55,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 33u16,
                                        expected_tokens: &TOKENS_55,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            34u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_57,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 33u16,
                                        expected_tokens: &TOKENS_47,
                                        expected_rules: &RULES_30,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_56,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 33u16,
                                        expected_tokens: &TOKENS_56,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            34u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_57,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 33u16,
                                        expected_tokens: &TOKENS_47,
                                        expected_rules: &RULES_30,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::BcOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 33u16,
                                            expected_tokens: &TOKENS_45,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            34u16,
                                        ),
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 33u16,
                                            expected_tokens: &TOKENS_45,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::StructType {
                        name: capture_name,
                        items: capture_items,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_StructDefinition<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_type_ = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_ptr = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_13,
                                    token as u8,
                                ) {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        35u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Enum {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        37u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Struct {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        33u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Union {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        36u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_58,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 34u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_29,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::Semicolon
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_54,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_ptr,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_60,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 34u16,
                                        expected_tokens: &TOKENS_59,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::Semicolon
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_51,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 34u16,
                                        expected_tokens: &TOKENS_51,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::StructDefinition {
                        type_: capture_type_,
                        ptr: capture_ptr,
                        name: capture_name,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_BasicType<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_tokens = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_61,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_tokens,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    ::std::vec::Vec::push(
                                        &mut capture_tokens,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_13,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 35u16,
                                        expected_tokens: &TOKENS_13,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_61,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_tokens,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::BasicType {
                        tokens: capture_tokens,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_UnionType<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_items = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 36u16,
                                            expected_tokens: &TOKENS_62,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 36u16,
                                            expected_tokens: &TOKENS_62,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::Union {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_62,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 36u16,
                                        expected_tokens: &TOKENS_62,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            34u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_57,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 36u16,
                                        expected_tokens: &TOKENS_47,
                                        expected_rules: &RULES_30,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::BcOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 36u16,
                                            expected_tokens: &TOKENS_45,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            34u16,
                                        ),
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 36u16,
                                            expected_tokens: &TOKENS_45,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                break;
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_items,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            34u16,
                                        ),
                                    );
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_57,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 36u16,
                                        expected_tokens: &TOKENS_47,
                                        expected_rules: &RULES_30,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_56,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 36u16,
                                        expected_tokens: &TOKENS_56,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::UnionType {
                        name: capture_name,
                        items: capture_items,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_EnumType<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_items = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 37u16,
                                            expected_tokens: &TOKENS_63,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Enum {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::BcOpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 37u16,
                                            expected_tokens: &TOKENS_63,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_63,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 37u16,
                                        expected_tokens: &TOKENS_63,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::BcOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 37u16,
                                            expected_tokens: &TOKENS_45,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_items = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_items = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 37u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 37u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BcOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_56,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 37u16,
                                        expected_tokens: &TOKENS_56,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_47,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 37u16,
                                        expected_tokens: &TOKENS_47,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_items = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 8usize;
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 37u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 37u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            8usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_47,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 37u16,
                                        expected_tokens: &TOKENS_47,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::EnumType {
                        name: capture_name,
                        items: capture_items,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_Typedef<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_type_ = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Typedef {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 38u16,
                                            expected_tokens: &TOKENS_64,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        32u16,
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_64,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 38u16,
                                        expected_tokens: &TOKENS_64,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        32u16,
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_7,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 38u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_28,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::Typedef {
                        type_: capture_type_,
                        name: capture_name,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_StructTypeDef<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_args = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    let mut capture_func = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_next = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_type_ = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_ptr = ::std::vec::Vec::<
                        ::lady_deirdre::lexis::TokenRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Struct {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        33u16,
                                    );
                                    state = 7usize;
                                    continue;
                                }
                                if token == CToken::Union {
                                    capture_type_ = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        36u16,
                                    );
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_5,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_31,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Star {
                                    capture_func = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 39u16,
                                            expected_tokens: &TOKENS_16,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 8usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_16,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &TOKENS_16,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 8usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 39u16,
                                            expected_tokens: &TOKENS_10,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 9usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_10,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &TOKENS_10,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_15,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &RULES_5,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 6usize;
                                    continue;
                                }
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 10usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_12,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &TOKENS_12,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            6usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_8,
                                    token as u8,
                                ) {
                                    capture_next = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        3u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_8,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_6,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Star {
                                    ::std::vec::Vec::push(
                                        &mut capture_ptr,
                                        ::lady_deirdre::lexis::TokenCursor::token_ref(session, 0),
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 12usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_11,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &TOKENS_11,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            8usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 39u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 9usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_14,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            9usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 39u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 39u16,
                                            expected_tokens: &TOKENS_6,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_6,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            10usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_7,
                                    token as u8,
                                ) {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            31u16,
                                        ),
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 39u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_5,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 6usize;
                                    continue;
                                }
                                if token == CToken::Comma {
                                    ::std::vec::Vec::push(
                                        &mut capture_args,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 39u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_5,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_7,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_5,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            12usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    capture_next = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        30u16,
                                    );
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_8,
                                    token as u8,
                                ) {
                                    capture_next = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        40u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_9,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 39u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_32,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::StructTypeDef {
                        type_: capture_type_,
                        ptr: capture_ptr,
                        func: capture_func,
                        name: capture_name,
                        args: capture_args,
                        next: capture_next,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_StructTypeDefValue<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_value = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_array = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_next = ::std::vec::Vec::<
                        ::lady_deirdre::syntax::NodeRef,
                    >::with_capacity(1);
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::SetOp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::BkOpen {
                                    capture_array = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        4u16,
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_8,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 40u16,
                                        expected_tokens: &TOKENS_19,
                                        expected_rules: &RULES_7,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        41u16,
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_65,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 40u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_34,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    ::std::vec::Vec::push(
                                        &mut capture_next,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 40u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_33,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::std::vec::Vec::push(
                                        &mut capture_next,
                                        ::lady_deirdre::syntax::NodeRef::nil(),
                                    );
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 40u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_33,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::Ident {
                                    ::std::vec::Vec::push(
                                        &mut capture_next,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            42u16,
                                        ),
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_10,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 40u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_33,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::SetOp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_19,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 40u16,
                                        expected_tokens: &TOKENS_19,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            6usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Comma {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                if token == CToken::Ident {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 40u16,
                                            expected_tokens: &TOKENS_18,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::std::vec::Vec::push(
                                        &mut capture_next,
                                        ::lady_deirdre::syntax::SyntaxSession::descend(
                                            session,
                                            42u16,
                                        ),
                                    );
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_17,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 40u16,
                                        expected_tokens: &TOKENS_17,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::StructTypeDefValue {
                        array: capture_array,
                        value: capture_value,
                        next: capture_next,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_StructValue<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::BcClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 41u16,
                                            expected_tokens: &TOKENS_45,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_46,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 41u16,
                                        expected_tokens: &TOKENS_45,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::BcClose
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_47,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 41u16,
                                        expected_tokens: &TOKENS_47,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::StructValue {}
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_StructTypeDefValueNext<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_name = ::lady_deirdre::lexis::TokenRef::nil();
                    let mut capture_value = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_array = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BkOpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 42u16,
                                            expected_tokens: &TOKENS_10,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_array = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        4u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::SetOp {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 42u16,
                                            expected_tokens: &TOKENS_10,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::Ident {
                                    capture_name = ::lady_deirdre::lexis::TokenCursor::token_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_10,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 42u16,
                                        expected_tokens: &TOKENS_10,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::SetOp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::BcOpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 42u16,
                                            expected_tokens: &TOKENS_50,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        41u16,
                                    );
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 42u16,
                                            expected_tokens: &TOKENS_50,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    break;
                                }
                                break;
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        41u16,
                                    );
                                    break;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_value = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_65,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 42u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_34,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::BkOpen {
                                    capture_array = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        4u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::SetOp {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                break;
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::StructTypeDefValueNext {
                        name: capture_name,
                        array: capture_array,
                        value: capture_value,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_IfStatement<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_cond = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_action = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_next = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 43u16,
                                            expected_tokens: &TOKENS_66,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::If {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_66,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 43u16,
                                        expected_tokens: &TOKENS_66,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_cond = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 43u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 43u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 43u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_14,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 43u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::Else {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 43u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_26,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 43u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_26,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == <CToken as ::lady_deirdre::lexis::Token>::eoi()
                                {
                                    break;
                                }
                                if token == CToken::Else {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 43u16,
                                            expected_tokens: &TOKENS_67,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_next = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    break;
                                }
                                break;
                            }
                            6usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_6,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 43u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_next = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 43u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_26,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::IfStatement {
                        cond: capture_cond,
                        action: capture_action,
                        next: capture_next,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_WhileStatement<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_action = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_cond = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 44u16,
                                            expected_tokens: &TOKENS_68,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::While {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 6usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_68,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 44u16,
                                        expected_tokens: &TOKENS_68,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 44u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_26,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 44u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_cond = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 44u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 44u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_14,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 44u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            6usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_6,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 44u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::WhileStatement {
                        cond: capture_cond,
                        action: capture_action,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_ForStatement<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_action = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_def = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_inn_action = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_cond = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 45u16,
                                            expected_tokens: &TOKENS_69,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::For {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 4usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_69,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 45u16,
                                        expected_tokens: &TOKENS_69,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_def = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 45u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_26,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_cond = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 45u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 8usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 45u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_6,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 45u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 45u16,
                                            expected_tokens: &TOKENS_51,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_inn_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 8usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_51,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 45u16,
                                        expected_tokens: &TOKENS_51,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            6usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 45u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_14,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 45u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 45u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_26,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            8usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_inn_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 6usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 45u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 45u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::ForStatement {
                        def: capture_def,
                        cond: capture_cond,
                        inn_action: capture_inn_action,
                        action: capture_action,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_DoWhileStatement<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_action = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_cond = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 46u16,
                                            expected_tokens: &TOKENS_72,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::Do {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 8usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_73,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 46u16,
                                        expected_tokens: &TOKENS_72,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::Semicolon
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::While {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                if token == CToken::POpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 46u16,
                                            expected_tokens: &TOKENS_68,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_75,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 46u16,
                                        expected_tokens: &TOKENS_68,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::Semicolon
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 7usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_71,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 46u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::Semicolon
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::Semicolon {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 46u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_70,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 46u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::Semicolon
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Semicolon {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_51,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 46u16,
                                        expected_tokens: &TOKENS_51,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            7usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_cond = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 46u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_74,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 46u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::Semicolon
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            8usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_action = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        24u16,
                                    );
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::While {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 46u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_26,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_74,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 46u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_26,
                                    },
                                );
                                if recovered {
                                    if ::lady_deirdre::lexis::TokenCursor::token(session, 0)
                                        == CToken::Semicolon
                                    {
                                        ::lady_deirdre::lexis::TokenCursor::advance(session);
                                        recovered = false;
                                    }
                                }
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::DoWhileStatement {
                        action: capture_action,
                        cond: capture_cond,
                    }
                }
                #[allow(unused_mut)]
                #[allow(unused_assignments)]
                #[allow(unused_variables)]
                #[allow(non_snake_case)]
                fn parse_SwitchStatement<'code>(
                    session: &mut impl ::lady_deirdre::syntax::SyntaxSession<
                        'code,
                        Node = CNode,
                    >,
                ) -> CNode {
                    let mut state = 1usize;
                    let mut site = ::lady_deirdre::lexis::SiteRef::nil();
                    let mut first = true;
                    let mut capture_val = ::lady_deirdre::syntax::NodeRef::nil();
                    let mut capture_block = ::lady_deirdre::syntax::NodeRef::nil();
                    loop {
                        match first {
                            true => first = false,
                            false => skip_trivia(session),
                        }
                        match state {
                            1usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::Switch {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 2usize;
                                    continue;
                                }
                                if token == CToken::POpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 47u16,
                                            expected_tokens: &TOKENS_76,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_76,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 47u16,
                                        expected_tokens: &TOKENS_76,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            2usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::POpen {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 3usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_6,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 47u16,
                                        expected_tokens: &TOKENS_6,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            3usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if ::lady_deirdre::lexis::TokenSet::contains(
                                    &TOKENS_20,
                                    token as u8,
                                ) {
                                    capture_val = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        25u16,
                                    );
                                    state = 4usize;
                                    continue;
                                }
                                if token == CToken::PClose {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 47u16,
                                            expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                            expected_rules: &RULES_8,
                                        },
                                    );
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_20,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 47u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_8,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            4usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::PClose {
                                    ::lady_deirdre::lexis::TokenCursor::advance(session);
                                    state = 5usize;
                                    continue;
                                }
                                if token == CToken::BcOpen {
                                    site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                        session,
                                        0,
                                    );
                                    ::lady_deirdre::syntax::SyntaxSession::error(
                                        session,
                                        ::lady_deirdre::syntax::SyntaxError {
                                            span: site..site,
                                            context: 47u16,
                                            expected_tokens: &TOKENS_14,
                                            expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                        },
                                    );
                                    capture_block = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        23u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_14,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 47u16,
                                        expected_tokens: &TOKENS_14,
                                        expected_rules: &::lady_deirdre::syntax::EMPTY_RULE_SET,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            5usize => {
                                let token = ::lady_deirdre::lexis::TokenCursor::token(
                                    session,
                                    0,
                                );
                                if token == CToken::BcOpen {
                                    capture_block = ::lady_deirdre::syntax::SyntaxSession::descend(
                                        session,
                                        23u16,
                                    );
                                    break;
                                }
                                site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                let mut recovered = ::lady_deirdre::syntax::Recovery::recover(
                                    &::lady_deirdre::syntax::UNLIMITED_RECOVERY,
                                    session,
                                    &TOKENS_45,
                                );
                                let end_site = ::lady_deirdre::lexis::TokenCursor::site_ref(
                                    session,
                                    0,
                                );
                                ::lady_deirdre::syntax::SyntaxSession::error(
                                    session,
                                    ::lady_deirdre::syntax::SyntaxError {
                                        span: site..end_site,
                                        context: 47u16,
                                        expected_tokens: &::lady_deirdre::lexis::EMPTY_TOKEN_SET,
                                        expected_rules: &RULES_27,
                                    },
                                );
                                if !recovered {
                                    break;
                                }
                            }
                            other => {
                                ::core::panicking::panic_fmt(
                                    format_args!(
                                        "internal error: entered unreachable code: {0}",
                                        format_args!("Unknown state {0}.", other)
                                    ),
                                );
                            }
                        }
                    }
                    CNode::SwitchStatement {
                        val: capture_val,
                        block: capture_block,
                    }
                }
                match rule {
                    0u16 => parse_Root(session),
                    1u16 => parse_RootItem(session),
                    2u16 => parse_Definition(session),
                    3u16 => parse_DefinitionValue(session),
                    4u16 => parse_ArrayIndex(session),
                    5u16 => parse_Value12(session),
                    6u16 => parse_Value11(session),
                    7u16 => parse_Value10(session),
                    8u16 => parse_Value9(session),
                    9u16 => parse_Value8(session),
                    10u16 => parse_Value7(session),
                    11u16 => parse_Value6(session),
                    12u16 => parse_Value5(session),
                    13u16 => parse_Value4(session),
                    14u16 => parse_Value3(session),
                    15u16 => parse_Value2(session),
                    16u16 => parse_Value1(session),
                    17u16 => parse_UnVal(session),
                    18u16 => parse_Char(session),
                    19u16 => parse_PostOperator(session),
                    20u16 => parse_PostPath(session),
                    21u16 => parse_IncDec(session),
                    22u16 => parse_ParentVal(session),
                    23u16 => parse_CodeBlock(session),
                    24u16 => Self::parse_action(session),
                    25u16 => parse_Value(session),
                    26u16 => parse_IdentVal(session),
                    27u16 => parse_Number(session),
                    28u16 => parse_String(session),
                    29u16 => parse_DefinitionValueNext(session),
                    30u16 => parse_FuncDef(session),
                    31u16 => parse_FuncArg(session),
                    32u16 => parse_Type(session),
                    33u16 => parse_StructType(session),
                    34u16 => parse_StructDefinition(session),
                    35u16 => parse_BasicType(session),
                    36u16 => parse_UnionType(session),
                    37u16 => parse_EnumType(session),
                    38u16 => parse_Typedef(session),
                    39u16 => parse_StructTypeDef(session),
                    40u16 => parse_StructTypeDefValue(session),
                    41u16 => parse_StructValue(session),
                    42u16 => parse_StructTypeDefValueNext(session),
                    43u16 => parse_IfStatement(session),
                    44u16 => parse_WhileStatement(session),
                    45u16 => parse_ForStatement(session),
                    46u16 => parse_DoWhileStatement(session),
                    47u16 => parse_SwitchStatement(session),
                    other => {
                        ::core::panicking::panic_fmt(
                            format_args!(
                                "not implemented: {0}",
                                format_args!("Unsupported rule {0}.", other)
                            ),
                        );
                    }
                }
            }
            #[inline(always)]
            fn describe(
                rule: ::lady_deirdre::syntax::RuleIndex,
            ) -> ::std::option::Option<&'static str> {
                match rule {
                    0u16 => ::std::option::Option::Some("Root"),
                    1u16 => ::std::option::Option::Some("Root Item"),
                    2u16 => ::std::option::Option::Some("Definition"),
                    3u16 => ::std::option::Option::Some("Definition Value"),
                    4u16 => ::std::option::Option::Some("Array Index"),
                    5u16 => ::std::option::Option::Some("Value 12"),
                    6u16 => ::std::option::Option::Some("Value 11"),
                    7u16 => ::std::option::Option::Some("Value 10"),
                    8u16 => ::std::option::Option::Some("Value 9"),
                    9u16 => ::std::option::Option::Some("Value 8"),
                    10u16 => ::std::option::Option::Some("Value 7"),
                    11u16 => ::std::option::Option::Some("Value 6"),
                    12u16 => ::std::option::Option::Some("Value 5"),
                    13u16 => ::std::option::Option::Some("Value 4"),
                    14u16 => ::std::option::Option::Some("Value 3"),
                    15u16 => ::std::option::Option::Some("Value 2"),
                    16u16 => ::std::option::Option::Some("Value 1"),
                    17u16 => ::std::option::Option::Some("Un Val"),
                    18u16 => ::std::option::Option::Some("Char"),
                    19u16 => ::std::option::Option::Some("Post Operator"),
                    20u16 => ::std::option::Option::Some("Post Path"),
                    21u16 => ::std::option::Option::Some("Inc Dec"),
                    22u16 => ::std::option::Option::Some("Parent Val"),
                    23u16 => ::std::option::Option::Some("Code Block"),
                    24u16 => ::std::option::Option::Some("Action"),
                    25u16 => ::std::option::Option::Some("Value"),
                    26u16 => ::std::option::Option::Some("Ident Val"),
                    27u16 => ::std::option::Option::Some("Number"),
                    28u16 => ::std::option::Option::Some("String"),
                    29u16 => ::std::option::Option::Some("Definition Value Next"),
                    30u16 => ::std::option::Option::Some("Func Def"),
                    31u16 => ::std::option::Option::Some("Func Arg"),
                    32u16 => ::std::option::Option::Some("Type"),
                    33u16 => ::std::option::Option::Some("Struct Type"),
                    34u16 => ::std::option::Option::Some("Struct Definition"),
                    35u16 => ::std::option::Option::Some("Basic Type"),
                    36u16 => ::std::option::Option::Some("Union Type"),
                    37u16 => ::std::option::Option::Some("Enum Type"),
                    38u16 => ::std::option::Option::Some("Typedef"),
                    39u16 => ::std::option::Option::Some("Struct Type Def"),
                    40u16 => ::std::option::Option::Some("Struct Type Def Value"),
                    41u16 => ::std::option::Option::Some("Struct Value"),
                    42u16 => ::std::option::Option::Some("Struct Type Def Value Next"),
                    43u16 => ::std::option::Option::Some("If Statement"),
                    44u16 => ::std::option::Option::Some("While Statement"),
                    45u16 => ::std::option::Option::Some("For Statement"),
                    46u16 => ::std::option::Option::Some("Do While Statement"),
                    47u16 => ::std::option::Option::Some("Switch Statement"),
                    _ => ::std::option::Option::None,
                }
            }
        }
        impl CNode {
            pub const VALUE_RULE: ::lady_deirdre::syntax::RuleIndex = 25u16;
            pub const BASIC_TYPE_RULE: ::lady_deirdre::syntax::RuleIndex = 35u16;
            pub const IF_RULE: ::lady_deirdre::syntax::RuleIndex = 43u16;
            pub const WHILE_RULE: ::lady_deirdre::syntax::RuleIndex = 44u16;
            pub const FOR_RULE: ::lady_deirdre::syntax::RuleIndex = 45u16;
            pub const DO_WHILE_RULE: ::lady_deirdre::syntax::RuleIndex = 46u16;
            pub const SWITCH_RULE: ::lady_deirdre::syntax::RuleIndex = 47u16;
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CNode {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    CNode::Root { items: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Root",
                            "items",
                            &__self_0,
                        )
                    }
                    CNode::RootItem { item: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "RootItem",
                            "item",
                            &__self_0,
                        )
                    }
                    CNode::StructType { name: __self_0, items: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "StructType",
                            "name",
                            __self_0,
                            "items",
                            &__self_1,
                        )
                    }
                    CNode::BasicType { tokens: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "BasicType",
                            "tokens",
                            &__self_0,
                        )
                    }
                    CNode::EnumType { name: __self_0, items: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "EnumType",
                            "name",
                            __self_0,
                            "items",
                            &__self_1,
                        )
                    }
                    CNode::UnionType { name: __self_0, items: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "UnionType",
                            "name",
                            __self_0,
                            "items",
                            &__self_1,
                        )
                    }
                    CNode::Type { val: __self_0, ptr: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Type",
                            "val",
                            __self_0,
                            "ptr",
                            &__self_1,
                        )
                    }
                    CNode::Typedef { type_: __self_0, name: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Typedef",
                            "type_",
                            __self_0,
                            "name",
                            &__self_1,
                        )
                    }
                    CNode::StructDefinition {
                        type_: __self_0,
                        ptr: __self_1,
                        name: __self_2,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field3_finish(
                            f,
                            "StructDefinition",
                            "type_",
                            __self_0,
                            "ptr",
                            __self_1,
                            "name",
                            &__self_2,
                        )
                    }
                    CNode::StructTypeDef {
                        type_: __self_0,
                        ptr: __self_1,
                        func: __self_2,
                        name: __self_3,
                        args: __self_4,
                        next: __self_5,
                    } => {
                        let names: &'static _ = &[
                            "type_",
                            "ptr",
                            "func",
                            "name",
                            "args",
                            "next",
                        ];
                        let values: &[&dyn ::core::fmt::Debug] = &[
                            __self_0,
                            __self_1,
                            __self_2,
                            __self_3,
                            __self_4,
                            &__self_5,
                        ];
                        ::core::fmt::Formatter::debug_struct_fields_finish(
                            f,
                            "StructTypeDef",
                            names,
                            values,
                        )
                    }
                    CNode::StructTypeDefValue {
                        array: __self_0,
                        value: __self_1,
                        next: __self_2,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field3_finish(
                            f,
                            "StructTypeDefValue",
                            "array",
                            __self_0,
                            "value",
                            __self_1,
                            "next",
                            &__self_2,
                        )
                    }
                    CNode::StructTypeDefValueNext {
                        name: __self_0,
                        array: __self_1,
                        value: __self_2,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field3_finish(
                            f,
                            "StructTypeDefValueNext",
                            "name",
                            __self_0,
                            "array",
                            __self_1,
                            "value",
                            &__self_2,
                        )
                    }
                    CNode::Definition {
                        type_: __self_0,
                        ptr: __self_1,
                        func: __self_2,
                        name: __self_3,
                        args: __self_4,
                        next: __self_5,
                    } => {
                        let names: &'static _ = &[
                            "type_",
                            "ptr",
                            "func",
                            "name",
                            "args",
                            "next",
                        ];
                        let values: &[&dyn ::core::fmt::Debug] = &[
                            __self_0,
                            __self_1,
                            __self_2,
                            __self_3,
                            __self_4,
                            &__self_5,
                        ];
                        ::core::fmt::Formatter::debug_struct_fields_finish(
                            f,
                            "Definition",
                            names,
                            values,
                        )
                    }
                    CNode::DefinitionValue {
                        array: __self_0,
                        value: __self_1,
                        next: __self_2,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field3_finish(
                            f,
                            "DefinitionValue",
                            "array",
                            __self_0,
                            "value",
                            __self_1,
                            "next",
                            &__self_2,
                        )
                    }
                    CNode::DefinitionValueNext {
                        name: __self_0,
                        array: __self_1,
                        value: __self_2,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field3_finish(
                            f,
                            "DefinitionValueNext",
                            "name",
                            __self_0,
                            "array",
                            __self_1,
                            "value",
                            &__self_2,
                        )
                    }
                    CNode::FuncDef { args: __self_0, block: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "FuncDef",
                            "args",
                            __self_0,
                            "block",
                            &__self_1,
                        )
                    }
                    CNode::FuncArg {
                        type_: __self_0,
                        name: __self_1,
                        func: __self_2,
                        args: __self_3,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field4_finish(
                            f,
                            "FuncArg",
                            "type_",
                            __self_0,
                            "name",
                            __self_1,
                            "func",
                            __self_2,
                            "args",
                            &__self_3,
                        )
                    }
                    CNode::CodeBlock { items: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "CodeBlock",
                            "items",
                            &__self_0,
                        )
                    }
                    CNode::Action { val: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Action",
                            "val",
                            &__self_0,
                        )
                    }
                    CNode::Label { name: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Label",
                            "name",
                            &__self_0,
                        )
                    }
                    CNode::IfStatement {
                        cond: __self_0,
                        action: __self_1,
                        next: __self_2,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field3_finish(
                            f,
                            "IfStatement",
                            "cond",
                            __self_0,
                            "action",
                            __self_1,
                            "next",
                            &__self_2,
                        )
                    }
                    CNode::SwitchStatement { val: __self_0, block: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "SwitchStatement",
                            "val",
                            __self_0,
                            "block",
                            &__self_1,
                        )
                    }
                    CNode::WhileStatement { cond: __self_0, action: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "WhileStatement",
                            "cond",
                            __self_0,
                            "action",
                            &__self_1,
                        )
                    }
                    CNode::DoWhileStatement { action: __self_0, cond: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "DoWhileStatement",
                            "action",
                            __self_0,
                            "cond",
                            &__self_1,
                        )
                    }
                    CNode::ForStatement {
                        def: __self_0,
                        cond: __self_1,
                        inn_action: __self_2,
                        action: __self_3,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field4_finish(
                            f,
                            "ForStatement",
                            "def",
                            __self_0,
                            "cond",
                            __self_1,
                            "inn_action",
                            __self_2,
                            "action",
                            &__self_3,
                        )
                    }
                    CNode::ArrayIndex { value: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "ArrayIndex",
                            "value",
                            &__self_0,
                        )
                    }
                    CNode::StructValue {} => {
                        ::core::fmt::Formatter::write_str(f, "StructValue")
                    }
                    CNode::Number { token: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Number",
                            "token",
                            &__self_0,
                        )
                    }
                    CNode::String { tokens: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "String",
                            "tokens",
                            &__self_0,
                        )
                    }
                    CNode::Char { token: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Char",
                            "token",
                            &__self_0,
                        )
                    }
                    CNode::IdentVal { first: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "IdentVal",
                            "first",
                            &__self_0,
                        )
                    }
                    CNode::ParentVal { val: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "ParentVal",
                            "val",
                            &__self_0,
                        )
                    }
                    CNode::UnVal { val: __self_0, ops: __self_1, post_ops: __self_2 } => {
                        ::core::fmt::Formatter::debug_struct_field3_finish(
                            f,
                            "UnVal",
                            "val",
                            __self_0,
                            "ops",
                            __self_1,
                            "post_ops",
                            &__self_2,
                        )
                    }
                    CNode::PostPath { id: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "PostPath",
                            "id",
                            &__self_0,
                        )
                    }
                    CNode::PostOperator { val: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "PostOperator",
                            "val",
                            &__self_0,
                        )
                    }
                    CNode::IncDec { tokens: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "IncDec",
                            "tokens",
                            &__self_0,
                        )
                    }
                    CNode::Value1 { values: __self_0, ops: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Value1",
                            "values",
                            __self_0,
                            "ops",
                            &__self_1,
                        )
                    }
                    CNode::Value2 { values: __self_0, ops: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Value2",
                            "values",
                            __self_0,
                            "ops",
                            &__self_1,
                        )
                    }
                    CNode::Value3 { values: __self_0, ops: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Value3",
                            "values",
                            __self_0,
                            "ops",
                            &__self_1,
                        )
                    }
                    CNode::Value4 { values: __self_0, ops: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Value4",
                            "values",
                            __self_0,
                            "ops",
                            &__self_1,
                        )
                    }
                    CNode::Value5 { values: __self_0, ops: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Value5",
                            "values",
                            __self_0,
                            "ops",
                            &__self_1,
                        )
                    }
                    CNode::Value6 { values: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Value6",
                            "values",
                            &__self_0,
                        )
                    }
                    CNode::Value7 { values: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Value7",
                            "values",
                            &__self_0,
                        )
                    }
                    CNode::Value8 { values: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Value8",
                            "values",
                            &__self_0,
                        )
                    }
                    CNode::Value9 { values: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Value9",
                            "values",
                            &__self_0,
                        )
                    }
                    CNode::Value10 { values: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Value10",
                            "values",
                            &__self_0,
                        )
                    }
                    CNode::Value11 {
                        cond: __self_0,
                        value1: __self_1,
                        value2: __self_2,
                    } => {
                        ::core::fmt::Formatter::debug_struct_field3_finish(
                            f,
                            "Value11",
                            "cond",
                            __self_0,
                            "value1",
                            __self_1,
                            "value2",
                            &__self_2,
                        )
                    }
                    CNode::Value12 { values: __self_0, ops: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Value12",
                            "values",
                            __self_0,
                            "ops",
                            &__self_1,
                        )
                    }
                    CNode::Value { values: __self_0 } => {
                        ::core::fmt::Formatter::debug_struct_field1_finish(
                            f,
                            "Value",
                            "values",
                            &__self_0,
                        )
                    }
                    CNode::Mismatch { tokens: __self_0, nodes: __self_1 } => {
                        ::core::fmt::Formatter::debug_struct_field2_finish(
                            f,
                            "Mismatch",
                            "tokens",
                            __self_0,
                            "nodes",
                            &__self_1,
                        )
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for CNode {
            #[inline]
            fn clone(&self) -> CNode {
                match self {
                    CNode::Root { items: __self_0 } => {
                        CNode::Root {
                            items: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::RootItem { item: __self_0 } => {
                        CNode::RootItem {
                            item: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::StructType { name: __self_0, items: __self_1 } => {
                        CNode::StructType {
                            name: ::core::clone::Clone::clone(__self_0),
                            items: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::BasicType { tokens: __self_0 } => {
                        CNode::BasicType {
                            tokens: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::EnumType { name: __self_0, items: __self_1 } => {
                        CNode::EnumType {
                            name: ::core::clone::Clone::clone(__self_0),
                            items: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::UnionType { name: __self_0, items: __self_1 } => {
                        CNode::UnionType {
                            name: ::core::clone::Clone::clone(__self_0),
                            items: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::Type { val: __self_0, ptr: __self_1 } => {
                        CNode::Type {
                            val: ::core::clone::Clone::clone(__self_0),
                            ptr: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::Typedef { type_: __self_0, name: __self_1 } => {
                        CNode::Typedef {
                            type_: ::core::clone::Clone::clone(__self_0),
                            name: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::StructDefinition {
                        type_: __self_0,
                        ptr: __self_1,
                        name: __self_2,
                    } => {
                        CNode::StructDefinition {
                            type_: ::core::clone::Clone::clone(__self_0),
                            ptr: ::core::clone::Clone::clone(__self_1),
                            name: ::core::clone::Clone::clone(__self_2),
                        }
                    }
                    CNode::StructTypeDef {
                        type_: __self_0,
                        ptr: __self_1,
                        func: __self_2,
                        name: __self_3,
                        args: __self_4,
                        next: __self_5,
                    } => {
                        CNode::StructTypeDef {
                            type_: ::core::clone::Clone::clone(__self_0),
                            ptr: ::core::clone::Clone::clone(__self_1),
                            func: ::core::clone::Clone::clone(__self_2),
                            name: ::core::clone::Clone::clone(__self_3),
                            args: ::core::clone::Clone::clone(__self_4),
                            next: ::core::clone::Clone::clone(__self_5),
                        }
                    }
                    CNode::StructTypeDefValue {
                        array: __self_0,
                        value: __self_1,
                        next: __self_2,
                    } => {
                        CNode::StructTypeDefValue {
                            array: ::core::clone::Clone::clone(__self_0),
                            value: ::core::clone::Clone::clone(__self_1),
                            next: ::core::clone::Clone::clone(__self_2),
                        }
                    }
                    CNode::StructTypeDefValueNext {
                        name: __self_0,
                        array: __self_1,
                        value: __self_2,
                    } => {
                        CNode::StructTypeDefValueNext {
                            name: ::core::clone::Clone::clone(__self_0),
                            array: ::core::clone::Clone::clone(__self_1),
                            value: ::core::clone::Clone::clone(__self_2),
                        }
                    }
                    CNode::Definition {
                        type_: __self_0,
                        ptr: __self_1,
                        func: __self_2,
                        name: __self_3,
                        args: __self_4,
                        next: __self_5,
                    } => {
                        CNode::Definition {
                            type_: ::core::clone::Clone::clone(__self_0),
                            ptr: ::core::clone::Clone::clone(__self_1),
                            func: ::core::clone::Clone::clone(__self_2),
                            name: ::core::clone::Clone::clone(__self_3),
                            args: ::core::clone::Clone::clone(__self_4),
                            next: ::core::clone::Clone::clone(__self_5),
                        }
                    }
                    CNode::DefinitionValue {
                        array: __self_0,
                        value: __self_1,
                        next: __self_2,
                    } => {
                        CNode::DefinitionValue {
                            array: ::core::clone::Clone::clone(__self_0),
                            value: ::core::clone::Clone::clone(__self_1),
                            next: ::core::clone::Clone::clone(__self_2),
                        }
                    }
                    CNode::DefinitionValueNext {
                        name: __self_0,
                        array: __self_1,
                        value: __self_2,
                    } => {
                        CNode::DefinitionValueNext {
                            name: ::core::clone::Clone::clone(__self_0),
                            array: ::core::clone::Clone::clone(__self_1),
                            value: ::core::clone::Clone::clone(__self_2),
                        }
                    }
                    CNode::FuncDef { args: __self_0, block: __self_1 } => {
                        CNode::FuncDef {
                            args: ::core::clone::Clone::clone(__self_0),
                            block: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::FuncArg {
                        type_: __self_0,
                        name: __self_1,
                        func: __self_2,
                        args: __self_3,
                    } => {
                        CNode::FuncArg {
                            type_: ::core::clone::Clone::clone(__self_0),
                            name: ::core::clone::Clone::clone(__self_1),
                            func: ::core::clone::Clone::clone(__self_2),
                            args: ::core::clone::Clone::clone(__self_3),
                        }
                    }
                    CNode::CodeBlock { items: __self_0 } => {
                        CNode::CodeBlock {
                            items: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Action { val: __self_0 } => {
                        CNode::Action {
                            val: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Label { name: __self_0 } => {
                        CNode::Label {
                            name: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::IfStatement {
                        cond: __self_0,
                        action: __self_1,
                        next: __self_2,
                    } => {
                        CNode::IfStatement {
                            cond: ::core::clone::Clone::clone(__self_0),
                            action: ::core::clone::Clone::clone(__self_1),
                            next: ::core::clone::Clone::clone(__self_2),
                        }
                    }
                    CNode::SwitchStatement { val: __self_0, block: __self_1 } => {
                        CNode::SwitchStatement {
                            val: ::core::clone::Clone::clone(__self_0),
                            block: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::WhileStatement { cond: __self_0, action: __self_1 } => {
                        CNode::WhileStatement {
                            cond: ::core::clone::Clone::clone(__self_0),
                            action: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::DoWhileStatement { action: __self_0, cond: __self_1 } => {
                        CNode::DoWhileStatement {
                            action: ::core::clone::Clone::clone(__self_0),
                            cond: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::ForStatement {
                        def: __self_0,
                        cond: __self_1,
                        inn_action: __self_2,
                        action: __self_3,
                    } => {
                        CNode::ForStatement {
                            def: ::core::clone::Clone::clone(__self_0),
                            cond: ::core::clone::Clone::clone(__self_1),
                            inn_action: ::core::clone::Clone::clone(__self_2),
                            action: ::core::clone::Clone::clone(__self_3),
                        }
                    }
                    CNode::ArrayIndex { value: __self_0 } => {
                        CNode::ArrayIndex {
                            value: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::StructValue {} => CNode::StructValue {},
                    CNode::Number { token: __self_0 } => {
                        CNode::Number {
                            token: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::String { tokens: __self_0 } => {
                        CNode::String {
                            tokens: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Char { token: __self_0 } => {
                        CNode::Char {
                            token: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::IdentVal { first: __self_0 } => {
                        CNode::IdentVal {
                            first: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::ParentVal { val: __self_0 } => {
                        CNode::ParentVal {
                            val: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::UnVal { val: __self_0, ops: __self_1, post_ops: __self_2 } => {
                        CNode::UnVal {
                            val: ::core::clone::Clone::clone(__self_0),
                            ops: ::core::clone::Clone::clone(__self_1),
                            post_ops: ::core::clone::Clone::clone(__self_2),
                        }
                    }
                    CNode::PostPath { id: __self_0 } => {
                        CNode::PostPath {
                            id: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::PostOperator { val: __self_0 } => {
                        CNode::PostOperator {
                            val: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::IncDec { tokens: __self_0 } => {
                        CNode::IncDec {
                            tokens: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Value1 { values: __self_0, ops: __self_1 } => {
                        CNode::Value1 {
                            values: ::core::clone::Clone::clone(__self_0),
                            ops: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::Value2 { values: __self_0, ops: __self_1 } => {
                        CNode::Value2 {
                            values: ::core::clone::Clone::clone(__self_0),
                            ops: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::Value3 { values: __self_0, ops: __self_1 } => {
                        CNode::Value3 {
                            values: ::core::clone::Clone::clone(__self_0),
                            ops: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::Value4 { values: __self_0, ops: __self_1 } => {
                        CNode::Value4 {
                            values: ::core::clone::Clone::clone(__self_0),
                            ops: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::Value5 { values: __self_0, ops: __self_1 } => {
                        CNode::Value5 {
                            values: ::core::clone::Clone::clone(__self_0),
                            ops: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::Value6 { values: __self_0 } => {
                        CNode::Value6 {
                            values: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Value7 { values: __self_0 } => {
                        CNode::Value7 {
                            values: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Value8 { values: __self_0 } => {
                        CNode::Value8 {
                            values: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Value9 { values: __self_0 } => {
                        CNode::Value9 {
                            values: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Value10 { values: __self_0 } => {
                        CNode::Value10 {
                            values: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Value11 {
                        cond: __self_0,
                        value1: __self_1,
                        value2: __self_2,
                    } => {
                        CNode::Value11 {
                            cond: ::core::clone::Clone::clone(__self_0),
                            value1: ::core::clone::Clone::clone(__self_1),
                            value2: ::core::clone::Clone::clone(__self_2),
                        }
                    }
                    CNode::Value12 { values: __self_0, ops: __self_1 } => {
                        CNode::Value12 {
                            values: ::core::clone::Clone::clone(__self_0),
                            ops: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                    CNode::Value { values: __self_0 } => {
                        CNode::Value {
                            values: ::core::clone::Clone::clone(__self_0),
                        }
                    }
                    CNode::Mismatch { tokens: __self_0, nodes: __self_1 } => {
                        CNode::Mismatch {
                            tokens: ::core::clone::Clone::clone(__self_0),
                            nodes: ::core::clone::Clone::clone(__self_1),
                        }
                    }
                }
            }
        }
        impl CNode {
            fn parse_action<'code>(
                session: &mut impl SyntaxSession<'code, Node = Self>,
            ) -> Self {
                loop {
                    match session.token(0) {
                        CToken::Ident => {
                            let mut i = 1;
                            while session.token(i) != CToken::EOI
                                || session.token(i) == CToken::Whitespace
                                || session.token(i) == CToken::NewLine
                            {
                                i += 1;
                            }
                            break match session.token(i) {
                                CToken::Colon => {
                                    for _ in 0..i {
                                        session.advance();
                                    }
                                    Self::Label {
                                        name: session.token_ref(0),
                                    }
                                }
                                CToken::EOI => {
                                    Self::Action {
                                        val: session.descend(VALUE_RULE),
                                    }
                                }
                                CToken::Ident => Self::parse_definition(session),
                                _ => {
                                    ::core::panicking::panic(
                                        "internal error: entered unreachable code",
                                    )
                                }
                            };
                        }
                        _ => {}
                    }
                }
            }
            fn parse_definition<'code>(
                session: &mut impl SyntaxSession<'code, Node = Self>,
            ) -> Self {
                loop {
                    let mut i = 0;
                    match session.token(0) {
                        CToken::Unsigned
                        | CToken::Signed
                        | CToken::Long
                        | CToken::Int
                        | CToken::Char
                        | CToken::Float
                        | CToken::Double
                        | CToken::BoolType
                        | CToken::ComplexType
                        | CToken::ImaginaryType
                        | CToken::GnuComplex => {
                            let type_ = session.descend(BASIC_TYPE_RULE);
                            match session.token(i) {
                                CToken::Ident => {
                                    let mut j = 1;
                                    while session.token(i + j) != CToken::EOI
                                        || session.token(i + j) == CToken::Whitespace
                                        || session.token(i + j) == CToken::NewLine
                                    {
                                        j += 1;
                                    }
                                    match session.token(i + j) {
                                        CToken::POpen => {
                                            let type_ = session.descend(BASIC_TYPE_RULE);
                                            let name = session.token_ref(0);
                                        }
                                        _ => {}
                                    }
                                }
                                CToken::EOI => {
                                    break Self::Mismatch {
                                        tokens: ::alloc::vec::Vec::new(),
                                        nodes: <[_]>::into_vec(
                                            #[rustc_box]
                                            ::alloc::boxed::Box::new([type_]),
                                        ),
                                    };
                                }
                                token => {}
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
    }
    use lady_deirdre::{
        lexis::{CodeContent, Token},
        syntax::TreeContent, Document,
    };
    use std::fs;
    pub fn main() {
        let tree = Document::<
            syntax::CNode,
        >::from(
            fs::read_to_string("test.c").expect("Should have been able to read the file"),
        );
        {
            ::std::io::_print(
                format_args!(
                    "{0}\n{1}\n", tree.chunks(..).map(| ch | lexis::CToken::describe(ch
                    .token as u8).unwrap()).collect::< Vec < _ >> ().join("|"), tree
                    .errors().map(| error | error.display(& tree).to_string()).collect::<
                    Vec < _ >> ().join("\n")
                ),
            );
        };
    }
}
fn main() {
    syntax_c::main();
}
